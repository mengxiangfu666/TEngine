// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bean.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from bean.proto</summary>
public static partial class BeanReflection {

  #region Descriptor
  /// <summary>File descriptor for bean.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static BeanReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgpiZWFuLnByb3RvIjQKCEhlcm9EYXRhEgoKAmlkGAEgASgJEg4KBmhlcm9J",
          "ZBgCIAEoCRIMCgRzdGFyGAMgASgFIjoKCVN0b25lRGF0YRIKCgJpZBgBIAEo",
          "CRIMCgR0eXBlGAIgASgFEhMKC2V4cGxvaXR0aW1lGAMgASgDIigKDUZvcm1h",
          "dGlvbkRhdGESCwoDcG9zGAEgASgFEgoKAmlkGAIgASgJIisKDEhlcm9EYXRh",
          "TGlzdBIbCghoZXJvRGF0YRgBIAMoCzIJLkhlcm9EYXRhIi4KDVN0b25lRGF0",
          "YUxpc3QSHQoJc3RvbmVEYXRhGAEgAygLMgouU3RvbmVEYXRhIjoKEUZvcm1h",
          "dGlvbkRhdGFMaXN0EiUKDWZvcm1hdGlvbkRhdGEYASADKAsyDi5Gb3JtYXRp",
          "b25EYXRhIiAKCEJvb2xMaXN0EhQKDGJvb2xMaXN0RGF0YRgBIAMoCCIXCgdM",
          "aXN0SW50EgwKBGRhdGEYASADKAUigwoKCFBsYXllclBiEgsKA3BpZBgBIAEo",
          "BRIPCgdhY2NvdW50GAIgASgJEgwKBG5hbWUYAyABKAkSDAoEaWNvbhgEIAEo",
          "CRIOCgZwcm93ZXIYBSABKAUSCwoDZXhwGAYgASgFEg0KBWxldmVsGAcgASgF",
          "Eg0KBXN0YWdlGAggASgFEhgKEHNob3BCdXlHb2xkRmlyc3QYCSABKAkSGwoT",
          "c2hvcEJ1eURpYW1vbmRGaXJzdBgKIAEoCRIMCgRnb2xkGAsgASgFEg8KB2Rp",
          "YW1vbmQYDCABKAUSFAoMZW5kbGVzc1Rvd2VyGA0gASgFEhMKC3Nob3BDYXJk",
          "S2V5GA4gASgFEhQKDHR1cm50YWJsZUtleRgPIAEoBRIWCg50b3RhbEhlcm9D",
          "b3VudBgQIAEoBRIjCgxoZXJvRGF0YUxpc3QYESABKAsyDS5IZXJvRGF0YUxp",
          "c3QSJQoNc3RvbmVEYXRhTGlzdBgSIAEoCzIOLlN0b25lRGF0YUxpc3QSLQoR",
          "Zm9ybWF0aW9uRGF0YUxpc3QYEyABKAsyEi5Gb3JtYXRpb25EYXRhTGlzdBIc",
          "ChRvZmZlclJld2FyZFRhc2tMZXZlbBgUIAEoBRIYChBvZmZlclJld2FyZENv",
          "dW50GBUgASgJEhcKD29mZmVyUmV3YXJkVGFzaxgWIAEoCRIQCghjYXJkRGF0",
          "YRgXIAEoCRIZChFoYXZlRXF1aXBtZW50RGF0YRgYIAEoCRIZChF3ZWFyRXF1",
          "aXBtZW50RGF0YRgZIAEoCRISCgp0YWxlbnREYXRhGBogASgJEhQKDHNob3BD",
          "YXJkVGltZRgbIAEoCRISCgpoYW5nVXBUaW1lGBwgASgJEhIKCnNob3BFcVRp",
          "bWUYHSABKAkSFwoPb2ZmZXJSZXdhcmRUaW1lGB4gASgJEhoKEmJvc3NDaGFs",
          "bGVuZ2VkVGltZRgfIAEoBRIaChJnb2xkQ2hhbGxlbmdlZFRpbWUYICABKAUS",
          "FwoPc3VycHJpc2VCb3hUaW1lGCEgASgFEhkKEWJ1bGVNb250aENhcmRUaW1l",
          "GCIgASgJEhsKE3B1cnBsZU1vbnRoQ2FyZFRpbWUYIyABKAkSJAocYnVsZU1v",
          "bnRoQ2FyZERhaWx5UmV3YXJkVGltZRgkIAEoBRImCh5wdXJwbGVNb250aENh",
          "cmREYWlseVJld2FyZFRpbWUYJSABKAUSGgoSZGFpbHlMb2dpblplcm9UaW1l",
          "GCYgASgJEhEKCXBsYXlUaW1lcxgnIAEoBRIXCg90dXJudGFibGVBZFRpbWUY",
          "KCABKAUSGQoRdHVybnRhYmxlQWRDRFRpbWUYKSABKAkSHAoUZGlhbW9kR3Jv",
          "d3RoRnVuZFRpbWUYKiABKAkSGgoSZ29sZEdyb3d0aEZ1bmRUaW1lGCsgASgJ",
          "EikKFmRpYW1vZEdyb3d0aEZ1bmRSZXdhcmQYLCABKAsyCS5Cb29sTGlzdBIn",
          "ChRnb2xkR3Jvd3RoRnVuZFJld2FyZBgtIAEoCzIJLkJvb2xMaXN0EhoKEnB2",
          "cEF1dG9SZWZyZXNoVGltZRguIAEoCRIcChRwdnBNYW51YWxSZWZyZXNoVGlt",
          "ZRgvIAEoCRIXCg9wdnBGaXJzdFN1Y2NlZWQYMCABKAUSEAoIcHZwVGltZXMY",
          "OyABKAUSDgoGcHZwS2V5GDwgASgFEhcKD3B2cEdldERheVJld2FyZBg9IAEo",
          "CCIjCghSZXdhcmRQYhIKCgJpZBgBIAEoBRILCgNudW0YAiABKAUibwoGTWFp",
          "bFBiEgoKAmlkGAEgASgFEg0KBXRpdGxlGAIgASgJEg8KB2NvbnRlbnQYAyAB",
          "KAkSGQoGcmV3YXJkGAQgAygLMgkuUmV3YXJkUGISDQoFc3RhdGUYBSABKAUS",
          "DwoHZGVsdGltZRgGIAEoBSJQCgZSYW5rUGISCwoDcGlkGAEgASgFEgwKBG5h",
          "bWUYAiABKAkSDAoEaWNvbhgDIAEoCRIOCgZwcm93ZXIYBCABKAUSDQoFc3Rh",
          "Z2UYBSABKAUiMwoHRXJyb3JQYhIMCgRjb2RlGAEgASgFEg0KBXJlcUlkGAIg",
          "ASgFEgsKA21zZxgDIAEoCSIhChJQdnBDaGFsbGVuZ2VMaXN0UGISCwoDcGlk",
          "GAEgAygFIusBCgpQdnBFbmVteVBiEgsKA3BpZBgBIAEoBRIMCgRuYW1lGAIg",
          "ASgJEgwKBGljb24YAyABKAkSDQoFbGV2ZWwYBCABKAUSEAoIaW50ZWdyYWwY",
          "BSABKAUSIwoMaGVyb0RhdGFMaXN0GAYgASgLMg0uSGVyb0RhdGFMaXN0Ei0K",
          "EWZvcm1hdGlvbkRhdGFMaXN0GAcgASgLMhIuRm9ybWF0aW9uRGF0YUxpc3QS",
          "EAoIY2FyZERhdGEYCCABKAkSGQoRd2VhckVxdWlwbWVudERhdGEYCSABKAkS",
          "EgoKdGFsZW50RGF0YRgKIAEoCSJYCgxQZXJzb25SYW5rUGISCwoDcGlkGAEg",
          "ASgFEg0KBWxldmVsGAIgASgFEgwKBGljb24YAyABKAkSDAoEbmFtZRgEIAEo",
          "CRIQCghpbnRlZ3JhbBgFIAEoBUIUCgpjb20uY2IubXNnQgZQQkJlYW5iBnBy",
          "b3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::HeroData), global::HeroData.Parser, new[]{ "Id", "HeroId", "Star" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::StoneData), global::StoneData.Parser, new[]{ "Id", "Type", "Exploittime" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FormationData), global::FormationData.Parser, new[]{ "Pos", "Id" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::HeroDataList), global::HeroDataList.Parser, new[]{ "HeroData" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::StoneDataList), global::StoneDataList.Parser, new[]{ "StoneData" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FormationDataList), global::FormationDataList.Parser, new[]{ "FormationData" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BoolList), global::BoolList.Parser, new[]{ "BoolListData" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListInt), global::ListInt.Parser, new[]{ "Data" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerPb), global::PlayerPb.Parser, new[]{ "Pid", "Account", "Name", "Icon", "Prower", "Exp", "Level", "Stage", "ShopBuyGoldFirst", "ShopBuyDiamondFirst", "Gold", "Diamond", "EndlessTower", "ShopCardKey", "TurntableKey", "TotalHeroCount", "HeroDataList", "StoneDataList", "FormationDataList", "OfferRewardTaskLevel", "OfferRewardCount", "OfferRewardTask", "CardData", "HaveEquipmentData", "WearEquipmentData", "TalentData", "ShopCardTime", "HangUpTime", "ShopEqTime", "OfferRewardTime", "BossChallengedTime", "GoldChallengedTime", "SurpriseBoxTime", "BuleMonthCardTime", "PurpleMonthCardTime", "BuleMonthCardDailyRewardTime", "PurpleMonthCardDailyRewardTime", "DailyLoginZeroTime", "PlayTimes", "TurntableAdTime", "TurntableAdCDTime", "DiamodGrowthFundTime", "GoldGrowthFundTime", "DiamodGrowthFundReward", "GoldGrowthFundReward", "PvpAutoRefreshTime", "PvpManualRefreshTime", "PvpFirstSucceed", "PvpTimes", "PvpKey", "PvpGetDayReward" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RewardPb), global::RewardPb.Parser, new[]{ "Id", "Num" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MailPb), global::MailPb.Parser, new[]{ "Id", "Title", "Content", "Reward", "State", "Deltime" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RankPb), global::RankPb.Parser, new[]{ "Pid", "Name", "Icon", "Prower", "Stage" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ErrorPb), global::ErrorPb.Parser, new[]{ "Code", "ReqId", "Msg" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PvpChallengeListPb), global::PvpChallengeListPb.Parser, new[]{ "Pid" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PvpEnemyPb), global::PvpEnemyPb.Parser, new[]{ "Pid", "Name", "Icon", "Level", "Integral", "HeroDataList", "FormationDataList", "CardData", "WearEquipmentData", "TalentData" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PersonRankPb), global::PersonRankPb.Parser, new[]{ "Pid", "Level", "Icon", "Name", "Integral" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
/// 英雄单位信息
/// </summary>
public sealed partial class HeroData : pb::IMessage<HeroData> {
  private static readonly pb::MessageParser<HeroData> _parser = new pb::MessageParser<HeroData>(() => new HeroData());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<HeroData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HeroData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HeroData(HeroData other) : this() {
    id_ = other.id_;
    heroId_ = other.heroId_;
    star_ = other.star_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HeroData Clone() {
    return new HeroData(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "heroId" field.</summary>
  public const int HeroIdFieldNumber = 2;
  private string heroId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HeroId {
    get { return heroId_; }
    set {
      heroId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "star" field.</summary>
  public const int StarFieldNumber = 3;
  private int star_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Star {
    get { return star_; }
    set {
      star_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as HeroData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(HeroData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (HeroId != other.HeroId) return false;
    if (Star != other.Star) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (HeroId.Length != 0) hash ^= HeroId.GetHashCode();
    if (Star != 0) hash ^= Star.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (HeroId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(HeroId);
    }
    if (Star != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Star);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (HeroId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HeroId);
    }
    if (Star != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Star);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(HeroData other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.HeroId.Length != 0) {
      HeroId = other.HeroId;
    }
    if (other.Star != 0) {
      Star = other.Star;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          HeroId = input.ReadString();
          break;
        }
        case 24: {
          Star = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 不可放置单位信息
/// </summary>
public sealed partial class StoneData : pb::IMessage<StoneData> {
  private static readonly pb::MessageParser<StoneData> _parser = new pb::MessageParser<StoneData>(() => new StoneData());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<StoneData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StoneData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StoneData(StoneData other) : this() {
    id_ = other.id_;
    type_ = other.type_;
    exploittime_ = other.exploittime_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StoneData Clone() {
    return new StoneData(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private int type_;
  /// <summary>
  ///1石头 2矿
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "exploittime" field.</summary>
  public const int ExploittimeFieldNumber = 3;
  private long exploittime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Exploittime {
    get { return exploittime_; }
    set {
      exploittime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as StoneData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(StoneData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Type != other.Type) return false;
    if (Exploittime != other.Exploittime) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    if (Exploittime != 0L) hash ^= Exploittime.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (Type != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Type);
    }
    if (Exploittime != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(Exploittime);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (Exploittime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Exploittime);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(StoneData other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.Exploittime != 0L) {
      Exploittime = other.Exploittime;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 16: {
          Type = input.ReadInt32();
          break;
        }
        case 24: {
          Exploittime = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 布阵单位信息
/// </summary>
public sealed partial class FormationData : pb::IMessage<FormationData> {
  private static readonly pb::MessageParser<FormationData> _parser = new pb::MessageParser<FormationData>(() => new FormationData());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FormationData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FormationData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FormationData(FormationData other) : this() {
    pos_ = other.pos_;
    id_ = other.id_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FormationData Clone() {
    return new FormationData(this);
  }

  /// <summary>Field number for the "pos" field.</summary>
  public const int PosFieldNumber = 1;
  private int pos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pos {
    get { return pos_; }
    set {
      pos_ = value;
    }
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 2;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FormationData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FormationData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Pos != other.Pos) return false;
    if (Id != other.Id) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Pos != 0) hash ^= Pos.GetHashCode();
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Pos != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Pos);
    }
    if (Id.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Id);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Pos != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
    }
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FormationData other) {
    if (other == null) {
      return;
    }
    if (other.Pos != 0) {
      Pos = other.Pos;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Pos = input.ReadInt32();
          break;
        }
        case 18: {
          Id = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 英雄单位信息List
/// </summary>
public sealed partial class HeroDataList : pb::IMessage<HeroDataList> {
  private static readonly pb::MessageParser<HeroDataList> _parser = new pb::MessageParser<HeroDataList>(() => new HeroDataList());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<HeroDataList> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HeroDataList() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HeroDataList(HeroDataList other) : this() {
    heroData_ = other.heroData_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HeroDataList Clone() {
    return new HeroDataList(this);
  }

  /// <summary>Field number for the "heroData" field.</summary>
  public const int HeroDataFieldNumber = 1;
  private static readonly pb::FieldCodec<global::HeroData> _repeated_heroData_codec
      = pb::FieldCodec.ForMessage(10, global::HeroData.Parser);
  private readonly pbc::RepeatedField<global::HeroData> heroData_ = new pbc::RepeatedField<global::HeroData>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::HeroData> HeroData {
    get { return heroData_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as HeroDataList);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(HeroDataList other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!heroData_.Equals(other.heroData_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= heroData_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    heroData_.WriteTo(output, _repeated_heroData_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += heroData_.CalculateSize(_repeated_heroData_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(HeroDataList other) {
    if (other == null) {
      return;
    }
    heroData_.Add(other.heroData_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          heroData_.AddEntriesFrom(input, _repeated_heroData_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 不可放置单位信息List
/// </summary>
public sealed partial class StoneDataList : pb::IMessage<StoneDataList> {
  private static readonly pb::MessageParser<StoneDataList> _parser = new pb::MessageParser<StoneDataList>(() => new StoneDataList());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<StoneDataList> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StoneDataList() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StoneDataList(StoneDataList other) : this() {
    stoneData_ = other.stoneData_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StoneDataList Clone() {
    return new StoneDataList(this);
  }

  /// <summary>Field number for the "stoneData" field.</summary>
  public const int StoneDataFieldNumber = 1;
  private static readonly pb::FieldCodec<global::StoneData> _repeated_stoneData_codec
      = pb::FieldCodec.ForMessage(10, global::StoneData.Parser);
  private readonly pbc::RepeatedField<global::StoneData> stoneData_ = new pbc::RepeatedField<global::StoneData>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::StoneData> StoneData {
    get { return stoneData_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as StoneDataList);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(StoneDataList other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!stoneData_.Equals(other.stoneData_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= stoneData_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    stoneData_.WriteTo(output, _repeated_stoneData_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += stoneData_.CalculateSize(_repeated_stoneData_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(StoneDataList other) {
    if (other == null) {
      return;
    }
    stoneData_.Add(other.stoneData_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          stoneData_.AddEntriesFrom(input, _repeated_stoneData_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 布阵单位信息List
/// </summary>
public sealed partial class FormationDataList : pb::IMessage<FormationDataList> {
  private static readonly pb::MessageParser<FormationDataList> _parser = new pb::MessageParser<FormationDataList>(() => new FormationDataList());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FormationDataList> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FormationDataList() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FormationDataList(FormationDataList other) : this() {
    formationData_ = other.formationData_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FormationDataList Clone() {
    return new FormationDataList(this);
  }

  /// <summary>Field number for the "formationData" field.</summary>
  public const int FormationDataFieldNumber = 1;
  private static readonly pb::FieldCodec<global::FormationData> _repeated_formationData_codec
      = pb::FieldCodec.ForMessage(10, global::FormationData.Parser);
  private readonly pbc::RepeatedField<global::FormationData> formationData_ = new pbc::RepeatedField<global::FormationData>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::FormationData> FormationData {
    get { return formationData_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FormationDataList);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FormationDataList other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!formationData_.Equals(other.formationData_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= formationData_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    formationData_.WriteTo(output, _repeated_formationData_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += formationData_.CalculateSize(_repeated_formationData_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FormationDataList other) {
    if (other == null) {
      return;
    }
    formationData_.Add(other.formationData_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          formationData_.AddEntriesFrom(input, _repeated_formationData_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// BoolList
/// </summary>
public sealed partial class BoolList : pb::IMessage<BoolList> {
  private static readonly pb::MessageParser<BoolList> _parser = new pb::MessageParser<BoolList>(() => new BoolList());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BoolList> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BoolList() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BoolList(BoolList other) : this() {
    boolListData_ = other.boolListData_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BoolList Clone() {
    return new BoolList(this);
  }

  /// <summary>Field number for the "boolListData" field.</summary>
  public const int BoolListDataFieldNumber = 1;
  private static readonly pb::FieldCodec<bool> _repeated_boolListData_codec
      = pb::FieldCodec.ForBool(10);
  private readonly pbc::RepeatedField<bool> boolListData_ = new pbc::RepeatedField<bool>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<bool> BoolListData {
    get { return boolListData_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BoolList);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BoolList other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!boolListData_.Equals(other.boolListData_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= boolListData_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    boolListData_.WriteTo(output, _repeated_boolListData_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += boolListData_.CalculateSize(_repeated_boolListData_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BoolList other) {
    if (other == null) {
      return;
    }
    boolListData_.Add(other.boolListData_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 8: {
          boolListData_.AddEntriesFrom(input, _repeated_boolListData_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// IntList
/// </summary>
public sealed partial class ListInt : pb::IMessage<ListInt> {
  private static readonly pb::MessageParser<ListInt> _parser = new pb::MessageParser<ListInt>(() => new ListInt());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListInt> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListInt() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListInt(ListInt other) : this() {
    data_ = other.data_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListInt Clone() {
    return new ListInt(this);
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_data_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> data_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> Data {
    get { return data_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListInt);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListInt other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!data_.Equals(other.data_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= data_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    data_.WriteTo(output, _repeated_data_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += data_.CalculateSize(_repeated_data_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListInt other) {
    if (other == null) {
      return;
    }
    data_.Add(other.data_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 8: {
          data_.AddEntriesFrom(input, _repeated_data_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///玩家信息(只需存储和获取)
/// </summary>
public sealed partial class PlayerPb : pb::IMessage<PlayerPb> {
  private static readonly pb::MessageParser<PlayerPb> _parser = new pb::MessageParser<PlayerPb>(() => new PlayerPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerPb(PlayerPb other) : this() {
    pid_ = other.pid_;
    account_ = other.account_;
    name_ = other.name_;
    icon_ = other.icon_;
    prower_ = other.prower_;
    exp_ = other.exp_;
    level_ = other.level_;
    stage_ = other.stage_;
    shopBuyGoldFirst_ = other.shopBuyGoldFirst_;
    shopBuyDiamondFirst_ = other.shopBuyDiamondFirst_;
    gold_ = other.gold_;
    diamond_ = other.diamond_;
    endlessTower_ = other.endlessTower_;
    shopCardKey_ = other.shopCardKey_;
    turntableKey_ = other.turntableKey_;
    totalHeroCount_ = other.totalHeroCount_;
    HeroDataList = other.heroDataList_ != null ? other.HeroDataList.Clone() : null;
    StoneDataList = other.stoneDataList_ != null ? other.StoneDataList.Clone() : null;
    FormationDataList = other.formationDataList_ != null ? other.FormationDataList.Clone() : null;
    offerRewardTaskLevel_ = other.offerRewardTaskLevel_;
    offerRewardCount_ = other.offerRewardCount_;
    offerRewardTask_ = other.offerRewardTask_;
    cardData_ = other.cardData_;
    haveEquipmentData_ = other.haveEquipmentData_;
    wearEquipmentData_ = other.wearEquipmentData_;
    talentData_ = other.talentData_;
    shopCardTime_ = other.shopCardTime_;
    hangUpTime_ = other.hangUpTime_;
    shopEqTime_ = other.shopEqTime_;
    offerRewardTime_ = other.offerRewardTime_;
    bossChallengedTime_ = other.bossChallengedTime_;
    goldChallengedTime_ = other.goldChallengedTime_;
    surpriseBoxTime_ = other.surpriseBoxTime_;
    buleMonthCardTime_ = other.buleMonthCardTime_;
    purpleMonthCardTime_ = other.purpleMonthCardTime_;
    buleMonthCardDailyRewardTime_ = other.buleMonthCardDailyRewardTime_;
    purpleMonthCardDailyRewardTime_ = other.purpleMonthCardDailyRewardTime_;
    dailyLoginZeroTime_ = other.dailyLoginZeroTime_;
    playTimes_ = other.playTimes_;
    turntableAdTime_ = other.turntableAdTime_;
    turntableAdCDTime_ = other.turntableAdCDTime_;
    diamodGrowthFundTime_ = other.diamodGrowthFundTime_;
    goldGrowthFundTime_ = other.goldGrowthFundTime_;
    DiamodGrowthFundReward = other.diamodGrowthFundReward_ != null ? other.DiamodGrowthFundReward.Clone() : null;
    GoldGrowthFundReward = other.goldGrowthFundReward_ != null ? other.GoldGrowthFundReward.Clone() : null;
    pvpAutoRefreshTime_ = other.pvpAutoRefreshTime_;
    pvpManualRefreshTime_ = other.pvpManualRefreshTime_;
    pvpFirstSucceed_ = other.pvpFirstSucceed_;
    pvpTimes_ = other.pvpTimes_;
    pvpKey_ = other.pvpKey_;
    pvpGetDayReward_ = other.pvpGetDayReward_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerPb Clone() {
    return new PlayerPb(this);
  }

  /// <summary>Field number for the "pid" field.</summary>
  public const int PidFieldNumber = 1;
  private int pid_;
  /// <summary>
  ///基础信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pid {
    get { return pid_; }
    set {
      pid_ = value;
    }
  }

  /// <summary>Field number for the "account" field.</summary>
  public const int AccountFieldNumber = 2;
  private string account_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Account {
    get { return account_; }
    set {
      account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 3;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "icon" field.</summary>
  public const int IconFieldNumber = 4;
  private string icon_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Icon {
    get { return icon_; }
    set {
      icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "prower" field.</summary>
  public const int ProwerFieldNumber = 5;
  private int prower_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Prower {
    get { return prower_; }
    set {
      prower_ = value;
    }
  }

  /// <summary>Field number for the "exp" field.</summary>
  public const int ExpFieldNumber = 6;
  private int exp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Exp {
    get { return exp_; }
    set {
      exp_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 7;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "stage" field.</summary>
  public const int StageFieldNumber = 8;
  private int stage_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Stage {
    get { return stage_; }
    set {
      stage_ = value;
    }
  }

  /// <summary>Field number for the "shopBuyGoldFirst" field.</summary>
  public const int ShopBuyGoldFirstFieldNumber = 9;
  private string shopBuyGoldFirst_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ShopBuyGoldFirst {
    get { return shopBuyGoldFirst_; }
    set {
      shopBuyGoldFirst_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "shopBuyDiamondFirst" field.</summary>
  public const int ShopBuyDiamondFirstFieldNumber = 10;
  private string shopBuyDiamondFirst_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ShopBuyDiamondFirst {
    get { return shopBuyDiamondFirst_; }
    set {
      shopBuyDiamondFirst_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "gold" field.</summary>
  public const int GoldFieldNumber = 11;
  private int gold_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Gold {
    get { return gold_; }
    set {
      gold_ = value;
    }
  }

  /// <summary>Field number for the "diamond" field.</summary>
  public const int DiamondFieldNumber = 12;
  private int diamond_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Diamond {
    get { return diamond_; }
    set {
      diamond_ = value;
    }
  }

  /// <summary>Field number for the "endlessTower" field.</summary>
  public const int EndlessTowerFieldNumber = 13;
  private int endlessTower_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int EndlessTower {
    get { return endlessTower_; }
    set {
      endlessTower_ = value;
    }
  }

  /// <summary>Field number for the "shopCardKey" field.</summary>
  public const int ShopCardKeyFieldNumber = 14;
  private int shopCardKey_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ShopCardKey {
    get { return shopCardKey_; }
    set {
      shopCardKey_ = value;
    }
  }

  /// <summary>Field number for the "turntableKey" field.</summary>
  public const int TurntableKeyFieldNumber = 15;
  private int turntableKey_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TurntableKey {
    get { return turntableKey_; }
    set {
      turntableKey_ = value;
    }
  }

  /// <summary>Field number for the "totalHeroCount" field.</summary>
  public const int TotalHeroCountFieldNumber = 16;
  private int totalHeroCount_;
  /// <summary>
  ///战斗相关信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TotalHeroCount {
    get { return totalHeroCount_; }
    set {
      totalHeroCount_ = value;
    }
  }

  /// <summary>Field number for the "heroDataList" field.</summary>
  public const int HeroDataListFieldNumber = 17;
  private global::HeroDataList heroDataList_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::HeroDataList HeroDataList {
    get { return heroDataList_; }
    set {
      heroDataList_ = value;
    }
  }

  /// <summary>Field number for the "stoneDataList" field.</summary>
  public const int StoneDataListFieldNumber = 18;
  private global::StoneDataList stoneDataList_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StoneDataList StoneDataList {
    get { return stoneDataList_; }
    set {
      stoneDataList_ = value;
    }
  }

  /// <summary>Field number for the "formationDataList" field.</summary>
  public const int FormationDataListFieldNumber = 19;
  private global::FormationDataList formationDataList_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::FormationDataList FormationDataList {
    get { return formationDataList_; }
    set {
      formationDataList_ = value;
    }
  }

  /// <summary>Field number for the "offerRewardTaskLevel" field.</summary>
  public const int OfferRewardTaskLevelFieldNumber = 20;
  private int offerRewardTaskLevel_;
  /// <summary>
  ///派遣功能相关信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OfferRewardTaskLevel {
    get { return offerRewardTaskLevel_; }
    set {
      offerRewardTaskLevel_ = value;
    }
  }

  /// <summary>Field number for the "offerRewardCount" field.</summary>
  public const int OfferRewardCountFieldNumber = 21;
  private string offerRewardCount_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string OfferRewardCount {
    get { return offerRewardCount_; }
    set {
      offerRewardCount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "offerRewardTask" field.</summary>
  public const int OfferRewardTaskFieldNumber = 22;
  private string offerRewardTask_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string OfferRewardTask {
    get { return offerRewardTask_; }
    set {
      offerRewardTask_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "cardData" field.</summary>
  public const int CardDataFieldNumber = 23;
  private string cardData_ = "";
  /// <summary>
  ///卡牌功能相关信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string CardData {
    get { return cardData_; }
    set {
      cardData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "haveEquipmentData" field.</summary>
  public const int HaveEquipmentDataFieldNumber = 24;
  private string haveEquipmentData_ = "";
  /// <summary>
  ///装备功能相关信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HaveEquipmentData {
    get { return haveEquipmentData_; }
    set {
      haveEquipmentData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "wearEquipmentData" field.</summary>
  public const int WearEquipmentDataFieldNumber = 25;
  private string wearEquipmentData_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string WearEquipmentData {
    get { return wearEquipmentData_; }
    set {
      wearEquipmentData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "talentData" field.</summary>
  public const int TalentDataFieldNumber = 26;
  private string talentData_ = "";
  /// <summary>
  ///天赋功能相关信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TalentData {
    get { return talentData_; }
    set {
      talentData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "shopCardTime" field.</summary>
  public const int ShopCardTimeFieldNumber = 27;
  private string shopCardTime_ = "";
  /// <summary>
  ///时间相关
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ShopCardTime {
    get { return shopCardTime_; }
    set {
      shopCardTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "hangUpTime" field.</summary>
  public const int HangUpTimeFieldNumber = 28;
  private string hangUpTime_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HangUpTime {
    get { return hangUpTime_; }
    set {
      hangUpTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "shopEqTime" field.</summary>
  public const int ShopEqTimeFieldNumber = 29;
  private string shopEqTime_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ShopEqTime {
    get { return shopEqTime_; }
    set {
      shopEqTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "offerRewardTime" field.</summary>
  public const int OfferRewardTimeFieldNumber = 30;
  private string offerRewardTime_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string OfferRewardTime {
    get { return offerRewardTime_; }
    set {
      offerRewardTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "bossChallengedTime" field.</summary>
  public const int BossChallengedTimeFieldNumber = 31;
  private int bossChallengedTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BossChallengedTime {
    get { return bossChallengedTime_; }
    set {
      bossChallengedTime_ = value;
    }
  }

  /// <summary>Field number for the "goldChallengedTime" field.</summary>
  public const int GoldChallengedTimeFieldNumber = 32;
  private int goldChallengedTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GoldChallengedTime {
    get { return goldChallengedTime_; }
    set {
      goldChallengedTime_ = value;
    }
  }

  /// <summary>Field number for the "surpriseBoxTime" field.</summary>
  public const int SurpriseBoxTimeFieldNumber = 33;
  private int surpriseBoxTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SurpriseBoxTime {
    get { return surpriseBoxTime_; }
    set {
      surpriseBoxTime_ = value;
    }
  }

  /// <summary>Field number for the "buleMonthCardTime" field.</summary>
  public const int BuleMonthCardTimeFieldNumber = 34;
  private string buleMonthCardTime_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string BuleMonthCardTime {
    get { return buleMonthCardTime_; }
    set {
      buleMonthCardTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "purpleMonthCardTime" field.</summary>
  public const int PurpleMonthCardTimeFieldNumber = 35;
  private string purpleMonthCardTime_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PurpleMonthCardTime {
    get { return purpleMonthCardTime_; }
    set {
      purpleMonthCardTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "buleMonthCardDailyRewardTime" field.</summary>
  public const int BuleMonthCardDailyRewardTimeFieldNumber = 36;
  private int buleMonthCardDailyRewardTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BuleMonthCardDailyRewardTime {
    get { return buleMonthCardDailyRewardTime_; }
    set {
      buleMonthCardDailyRewardTime_ = value;
    }
  }

  /// <summary>Field number for the "purpleMonthCardDailyRewardTime" field.</summary>
  public const int PurpleMonthCardDailyRewardTimeFieldNumber = 37;
  private int purpleMonthCardDailyRewardTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PurpleMonthCardDailyRewardTime {
    get { return purpleMonthCardDailyRewardTime_; }
    set {
      purpleMonthCardDailyRewardTime_ = value;
    }
  }

  /// <summary>Field number for the "dailyLoginZeroTime" field.</summary>
  public const int DailyLoginZeroTimeFieldNumber = 38;
  private string dailyLoginZeroTime_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DailyLoginZeroTime {
    get { return dailyLoginZeroTime_; }
    set {
      dailyLoginZeroTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "playTimes" field.</summary>
  public const int PlayTimesFieldNumber = 39;
  private int playTimes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlayTimes {
    get { return playTimes_; }
    set {
      playTimes_ = value;
    }
  }

  /// <summary>Field number for the "turntableAdTime" field.</summary>
  public const int TurntableAdTimeFieldNumber = 40;
  private int turntableAdTime_;
  /// <summary>
  ///转盘
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TurntableAdTime {
    get { return turntableAdTime_; }
    set {
      turntableAdTime_ = value;
    }
  }

  /// <summary>Field number for the "turntableAdCDTime" field.</summary>
  public const int TurntableAdCDTimeFieldNumber = 41;
  private string turntableAdCDTime_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TurntableAdCDTime {
    get { return turntableAdCDTime_; }
    set {
      turntableAdCDTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "diamodGrowthFundTime" field.</summary>
  public const int DiamodGrowthFundTimeFieldNumber = 42;
  private string diamodGrowthFundTime_ = "";
  /// <summary>
  ///基金
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DiamodGrowthFundTime {
    get { return diamodGrowthFundTime_; }
    set {
      diamodGrowthFundTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "goldGrowthFundTime" field.</summary>
  public const int GoldGrowthFundTimeFieldNumber = 43;
  private string goldGrowthFundTime_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string GoldGrowthFundTime {
    get { return goldGrowthFundTime_; }
    set {
      goldGrowthFundTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "diamodGrowthFundReward" field.</summary>
  public const int DiamodGrowthFundRewardFieldNumber = 44;
  private global::BoolList diamodGrowthFundReward_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::BoolList DiamodGrowthFundReward {
    get { return diamodGrowthFundReward_; }
    set {
      diamodGrowthFundReward_ = value;
    }
  }

  /// <summary>Field number for the "goldGrowthFundReward" field.</summary>
  public const int GoldGrowthFundRewardFieldNumber = 45;
  private global::BoolList goldGrowthFundReward_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::BoolList GoldGrowthFundReward {
    get { return goldGrowthFundReward_; }
    set {
      goldGrowthFundReward_ = value;
    }
  }

  /// <summary>Field number for the "pvpAutoRefreshTime" field.</summary>
  public const int PvpAutoRefreshTimeFieldNumber = 46;
  private string pvpAutoRefreshTime_ = "";
  /// <summary>
  ///Pvp
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PvpAutoRefreshTime {
    get { return pvpAutoRefreshTime_; }
    set {
      pvpAutoRefreshTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "pvpManualRefreshTime" field.</summary>
  public const int PvpManualRefreshTimeFieldNumber = 47;
  private string pvpManualRefreshTime_ = "";
  /// <summary>
  ///手动刷新时间记录
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PvpManualRefreshTime {
    get { return pvpManualRefreshTime_; }
    set {
      pvpManualRefreshTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "pvpFirstSucceed" field.</summary>
  public const int PvpFirstSucceedFieldNumber = 48;
  private int pvpFirstSucceed_;
  /// <summary>
  ///Pvp首次胜利 0-未胜利 1-已胜利
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PvpFirstSucceed {
    get { return pvpFirstSucceed_; }
    set {
      pvpFirstSucceed_ = value;
    }
  }

  /// <summary>Field number for the "pvpTimes" field.</summary>
  public const int PvpTimesFieldNumber = 59;
  private int pvpTimes_;
  /// <summary>
  ///今日已挑战次数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PvpTimes {
    get { return pvpTimes_; }
    set {
      pvpTimes_ = value;
    }
  }

  /// <summary>Field number for the "pvpKey" field.</summary>
  public const int PvpKeyFieldNumber = 60;
  private int pvpKey_;
  /// <summary>
  ///PVP资源
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PvpKey {
    get { return pvpKey_; }
    set {
      pvpKey_ = value;
    }
  }

  /// <summary>Field number for the "pvpGetDayReward" field.</summary>
  public const int PvpGetDayRewardFieldNumber = 61;
  private bool pvpGetDayReward_;
  /// <summary>
  ///PVP本日奖励
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool PvpGetDayReward {
    get { return pvpGetDayReward_; }
    set {
      pvpGetDayReward_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Pid != other.Pid) return false;
    if (Account != other.Account) return false;
    if (Name != other.Name) return false;
    if (Icon != other.Icon) return false;
    if (Prower != other.Prower) return false;
    if (Exp != other.Exp) return false;
    if (Level != other.Level) return false;
    if (Stage != other.Stage) return false;
    if (ShopBuyGoldFirst != other.ShopBuyGoldFirst) return false;
    if (ShopBuyDiamondFirst != other.ShopBuyDiamondFirst) return false;
    if (Gold != other.Gold) return false;
    if (Diamond != other.Diamond) return false;
    if (EndlessTower != other.EndlessTower) return false;
    if (ShopCardKey != other.ShopCardKey) return false;
    if (TurntableKey != other.TurntableKey) return false;
    if (TotalHeroCount != other.TotalHeroCount) return false;
    if (!object.Equals(HeroDataList, other.HeroDataList)) return false;
    if (!object.Equals(StoneDataList, other.StoneDataList)) return false;
    if (!object.Equals(FormationDataList, other.FormationDataList)) return false;
    if (OfferRewardTaskLevel != other.OfferRewardTaskLevel) return false;
    if (OfferRewardCount != other.OfferRewardCount) return false;
    if (OfferRewardTask != other.OfferRewardTask) return false;
    if (CardData != other.CardData) return false;
    if (HaveEquipmentData != other.HaveEquipmentData) return false;
    if (WearEquipmentData != other.WearEquipmentData) return false;
    if (TalentData != other.TalentData) return false;
    if (ShopCardTime != other.ShopCardTime) return false;
    if (HangUpTime != other.HangUpTime) return false;
    if (ShopEqTime != other.ShopEqTime) return false;
    if (OfferRewardTime != other.OfferRewardTime) return false;
    if (BossChallengedTime != other.BossChallengedTime) return false;
    if (GoldChallengedTime != other.GoldChallengedTime) return false;
    if (SurpriseBoxTime != other.SurpriseBoxTime) return false;
    if (BuleMonthCardTime != other.BuleMonthCardTime) return false;
    if (PurpleMonthCardTime != other.PurpleMonthCardTime) return false;
    if (BuleMonthCardDailyRewardTime != other.BuleMonthCardDailyRewardTime) return false;
    if (PurpleMonthCardDailyRewardTime != other.PurpleMonthCardDailyRewardTime) return false;
    if (DailyLoginZeroTime != other.DailyLoginZeroTime) return false;
    if (PlayTimes != other.PlayTimes) return false;
    if (TurntableAdTime != other.TurntableAdTime) return false;
    if (TurntableAdCDTime != other.TurntableAdCDTime) return false;
    if (DiamodGrowthFundTime != other.DiamodGrowthFundTime) return false;
    if (GoldGrowthFundTime != other.GoldGrowthFundTime) return false;
    if (!object.Equals(DiamodGrowthFundReward, other.DiamodGrowthFundReward)) return false;
    if (!object.Equals(GoldGrowthFundReward, other.GoldGrowthFundReward)) return false;
    if (PvpAutoRefreshTime != other.PvpAutoRefreshTime) return false;
    if (PvpManualRefreshTime != other.PvpManualRefreshTime) return false;
    if (PvpFirstSucceed != other.PvpFirstSucceed) return false;
    if (PvpTimes != other.PvpTimes) return false;
    if (PvpKey != other.PvpKey) return false;
    if (PvpGetDayReward != other.PvpGetDayReward) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Pid != 0) hash ^= Pid.GetHashCode();
    if (Account.Length != 0) hash ^= Account.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Icon.Length != 0) hash ^= Icon.GetHashCode();
    if (Prower != 0) hash ^= Prower.GetHashCode();
    if (Exp != 0) hash ^= Exp.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (Stage != 0) hash ^= Stage.GetHashCode();
    if (ShopBuyGoldFirst.Length != 0) hash ^= ShopBuyGoldFirst.GetHashCode();
    if (ShopBuyDiamondFirst.Length != 0) hash ^= ShopBuyDiamondFirst.GetHashCode();
    if (Gold != 0) hash ^= Gold.GetHashCode();
    if (Diamond != 0) hash ^= Diamond.GetHashCode();
    if (EndlessTower != 0) hash ^= EndlessTower.GetHashCode();
    if (ShopCardKey != 0) hash ^= ShopCardKey.GetHashCode();
    if (TurntableKey != 0) hash ^= TurntableKey.GetHashCode();
    if (TotalHeroCount != 0) hash ^= TotalHeroCount.GetHashCode();
    if (heroDataList_ != null) hash ^= HeroDataList.GetHashCode();
    if (stoneDataList_ != null) hash ^= StoneDataList.GetHashCode();
    if (formationDataList_ != null) hash ^= FormationDataList.GetHashCode();
    if (OfferRewardTaskLevel != 0) hash ^= OfferRewardTaskLevel.GetHashCode();
    if (OfferRewardCount.Length != 0) hash ^= OfferRewardCount.GetHashCode();
    if (OfferRewardTask.Length != 0) hash ^= OfferRewardTask.GetHashCode();
    if (CardData.Length != 0) hash ^= CardData.GetHashCode();
    if (HaveEquipmentData.Length != 0) hash ^= HaveEquipmentData.GetHashCode();
    if (WearEquipmentData.Length != 0) hash ^= WearEquipmentData.GetHashCode();
    if (TalentData.Length != 0) hash ^= TalentData.GetHashCode();
    if (ShopCardTime.Length != 0) hash ^= ShopCardTime.GetHashCode();
    if (HangUpTime.Length != 0) hash ^= HangUpTime.GetHashCode();
    if (ShopEqTime.Length != 0) hash ^= ShopEqTime.GetHashCode();
    if (OfferRewardTime.Length != 0) hash ^= OfferRewardTime.GetHashCode();
    if (BossChallengedTime != 0) hash ^= BossChallengedTime.GetHashCode();
    if (GoldChallengedTime != 0) hash ^= GoldChallengedTime.GetHashCode();
    if (SurpriseBoxTime != 0) hash ^= SurpriseBoxTime.GetHashCode();
    if (BuleMonthCardTime.Length != 0) hash ^= BuleMonthCardTime.GetHashCode();
    if (PurpleMonthCardTime.Length != 0) hash ^= PurpleMonthCardTime.GetHashCode();
    if (BuleMonthCardDailyRewardTime != 0) hash ^= BuleMonthCardDailyRewardTime.GetHashCode();
    if (PurpleMonthCardDailyRewardTime != 0) hash ^= PurpleMonthCardDailyRewardTime.GetHashCode();
    if (DailyLoginZeroTime.Length != 0) hash ^= DailyLoginZeroTime.GetHashCode();
    if (PlayTimes != 0) hash ^= PlayTimes.GetHashCode();
    if (TurntableAdTime != 0) hash ^= TurntableAdTime.GetHashCode();
    if (TurntableAdCDTime.Length != 0) hash ^= TurntableAdCDTime.GetHashCode();
    if (DiamodGrowthFundTime.Length != 0) hash ^= DiamodGrowthFundTime.GetHashCode();
    if (GoldGrowthFundTime.Length != 0) hash ^= GoldGrowthFundTime.GetHashCode();
    if (diamodGrowthFundReward_ != null) hash ^= DiamodGrowthFundReward.GetHashCode();
    if (goldGrowthFundReward_ != null) hash ^= GoldGrowthFundReward.GetHashCode();
    if (PvpAutoRefreshTime.Length != 0) hash ^= PvpAutoRefreshTime.GetHashCode();
    if (PvpManualRefreshTime.Length != 0) hash ^= PvpManualRefreshTime.GetHashCode();
    if (PvpFirstSucceed != 0) hash ^= PvpFirstSucceed.GetHashCode();
    if (PvpTimes != 0) hash ^= PvpTimes.GetHashCode();
    if (PvpKey != 0) hash ^= PvpKey.GetHashCode();
    if (PvpGetDayReward != false) hash ^= PvpGetDayReward.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Pid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Pid);
    }
    if (Account.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Account);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Name);
    }
    if (Icon.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Icon);
    }
    if (Prower != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Prower);
    }
    if (Exp != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(Exp);
    }
    if (Level != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(Level);
    }
    if (Stage != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(Stage);
    }
    if (ShopBuyGoldFirst.Length != 0) {
      output.WriteRawTag(74);
      output.WriteString(ShopBuyGoldFirst);
    }
    if (ShopBuyDiamondFirst.Length != 0) {
      output.WriteRawTag(82);
      output.WriteString(ShopBuyDiamondFirst);
    }
    if (Gold != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(Gold);
    }
    if (Diamond != 0) {
      output.WriteRawTag(96);
      output.WriteInt32(Diamond);
    }
    if (EndlessTower != 0) {
      output.WriteRawTag(104);
      output.WriteInt32(EndlessTower);
    }
    if (ShopCardKey != 0) {
      output.WriteRawTag(112);
      output.WriteInt32(ShopCardKey);
    }
    if (TurntableKey != 0) {
      output.WriteRawTag(120);
      output.WriteInt32(TurntableKey);
    }
    if (TotalHeroCount != 0) {
      output.WriteRawTag(128, 1);
      output.WriteInt32(TotalHeroCount);
    }
    if (heroDataList_ != null) {
      output.WriteRawTag(138, 1);
      output.WriteMessage(HeroDataList);
    }
    if (stoneDataList_ != null) {
      output.WriteRawTag(146, 1);
      output.WriteMessage(StoneDataList);
    }
    if (formationDataList_ != null) {
      output.WriteRawTag(154, 1);
      output.WriteMessage(FormationDataList);
    }
    if (OfferRewardTaskLevel != 0) {
      output.WriteRawTag(160, 1);
      output.WriteInt32(OfferRewardTaskLevel);
    }
    if (OfferRewardCount.Length != 0) {
      output.WriteRawTag(170, 1);
      output.WriteString(OfferRewardCount);
    }
    if (OfferRewardTask.Length != 0) {
      output.WriteRawTag(178, 1);
      output.WriteString(OfferRewardTask);
    }
    if (CardData.Length != 0) {
      output.WriteRawTag(186, 1);
      output.WriteString(CardData);
    }
    if (HaveEquipmentData.Length != 0) {
      output.WriteRawTag(194, 1);
      output.WriteString(HaveEquipmentData);
    }
    if (WearEquipmentData.Length != 0) {
      output.WriteRawTag(202, 1);
      output.WriteString(WearEquipmentData);
    }
    if (TalentData.Length != 0) {
      output.WriteRawTag(210, 1);
      output.WriteString(TalentData);
    }
    if (ShopCardTime.Length != 0) {
      output.WriteRawTag(218, 1);
      output.WriteString(ShopCardTime);
    }
    if (HangUpTime.Length != 0) {
      output.WriteRawTag(226, 1);
      output.WriteString(HangUpTime);
    }
    if (ShopEqTime.Length != 0) {
      output.WriteRawTag(234, 1);
      output.WriteString(ShopEqTime);
    }
    if (OfferRewardTime.Length != 0) {
      output.WriteRawTag(242, 1);
      output.WriteString(OfferRewardTime);
    }
    if (BossChallengedTime != 0) {
      output.WriteRawTag(248, 1);
      output.WriteInt32(BossChallengedTime);
    }
    if (GoldChallengedTime != 0) {
      output.WriteRawTag(128, 2);
      output.WriteInt32(GoldChallengedTime);
    }
    if (SurpriseBoxTime != 0) {
      output.WriteRawTag(136, 2);
      output.WriteInt32(SurpriseBoxTime);
    }
    if (BuleMonthCardTime.Length != 0) {
      output.WriteRawTag(146, 2);
      output.WriteString(BuleMonthCardTime);
    }
    if (PurpleMonthCardTime.Length != 0) {
      output.WriteRawTag(154, 2);
      output.WriteString(PurpleMonthCardTime);
    }
    if (BuleMonthCardDailyRewardTime != 0) {
      output.WriteRawTag(160, 2);
      output.WriteInt32(BuleMonthCardDailyRewardTime);
    }
    if (PurpleMonthCardDailyRewardTime != 0) {
      output.WriteRawTag(168, 2);
      output.WriteInt32(PurpleMonthCardDailyRewardTime);
    }
    if (DailyLoginZeroTime.Length != 0) {
      output.WriteRawTag(178, 2);
      output.WriteString(DailyLoginZeroTime);
    }
    if (PlayTimes != 0) {
      output.WriteRawTag(184, 2);
      output.WriteInt32(PlayTimes);
    }
    if (TurntableAdTime != 0) {
      output.WriteRawTag(192, 2);
      output.WriteInt32(TurntableAdTime);
    }
    if (TurntableAdCDTime.Length != 0) {
      output.WriteRawTag(202, 2);
      output.WriteString(TurntableAdCDTime);
    }
    if (DiamodGrowthFundTime.Length != 0) {
      output.WriteRawTag(210, 2);
      output.WriteString(DiamodGrowthFundTime);
    }
    if (GoldGrowthFundTime.Length != 0) {
      output.WriteRawTag(218, 2);
      output.WriteString(GoldGrowthFundTime);
    }
    if (diamodGrowthFundReward_ != null) {
      output.WriteRawTag(226, 2);
      output.WriteMessage(DiamodGrowthFundReward);
    }
    if (goldGrowthFundReward_ != null) {
      output.WriteRawTag(234, 2);
      output.WriteMessage(GoldGrowthFundReward);
    }
    if (PvpAutoRefreshTime.Length != 0) {
      output.WriteRawTag(242, 2);
      output.WriteString(PvpAutoRefreshTime);
    }
    if (PvpManualRefreshTime.Length != 0) {
      output.WriteRawTag(250, 2);
      output.WriteString(PvpManualRefreshTime);
    }
    if (PvpFirstSucceed != 0) {
      output.WriteRawTag(128, 3);
      output.WriteInt32(PvpFirstSucceed);
    }
    if (PvpTimes != 0) {
      output.WriteRawTag(216, 3);
      output.WriteInt32(PvpTimes);
    }
    if (PvpKey != 0) {
      output.WriteRawTag(224, 3);
      output.WriteInt32(PvpKey);
    }
    if (PvpGetDayReward != false) {
      output.WriteRawTag(232, 3);
      output.WriteBool(PvpGetDayReward);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Pid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
    }
    if (Account.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Icon.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
    }
    if (Prower != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Prower);
    }
    if (Exp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (Stage != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stage);
    }
    if (ShopBuyGoldFirst.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ShopBuyGoldFirst);
    }
    if (ShopBuyDiamondFirst.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ShopBuyDiamondFirst);
    }
    if (Gold != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
    }
    if (Diamond != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Diamond);
    }
    if (EndlessTower != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndlessTower);
    }
    if (ShopCardKey != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShopCardKey);
    }
    if (TurntableKey != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TurntableKey);
    }
    if (TotalHeroCount != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(TotalHeroCount);
    }
    if (heroDataList_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(HeroDataList);
    }
    if (stoneDataList_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StoneDataList);
    }
    if (formationDataList_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(FormationDataList);
    }
    if (OfferRewardTaskLevel != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(OfferRewardTaskLevel);
    }
    if (OfferRewardCount.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(OfferRewardCount);
    }
    if (OfferRewardTask.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(OfferRewardTask);
    }
    if (CardData.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(CardData);
    }
    if (HaveEquipmentData.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(HaveEquipmentData);
    }
    if (WearEquipmentData.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(WearEquipmentData);
    }
    if (TalentData.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(TalentData);
    }
    if (ShopCardTime.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(ShopCardTime);
    }
    if (HangUpTime.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(HangUpTime);
    }
    if (ShopEqTime.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(ShopEqTime);
    }
    if (OfferRewardTime.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(OfferRewardTime);
    }
    if (BossChallengedTime != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(BossChallengedTime);
    }
    if (GoldChallengedTime != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(GoldChallengedTime);
    }
    if (SurpriseBoxTime != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(SurpriseBoxTime);
    }
    if (BuleMonthCardTime.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(BuleMonthCardTime);
    }
    if (PurpleMonthCardTime.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(PurpleMonthCardTime);
    }
    if (BuleMonthCardDailyRewardTime != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(BuleMonthCardDailyRewardTime);
    }
    if (PurpleMonthCardDailyRewardTime != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(PurpleMonthCardDailyRewardTime);
    }
    if (DailyLoginZeroTime.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(DailyLoginZeroTime);
    }
    if (PlayTimes != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(PlayTimes);
    }
    if (TurntableAdTime != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(TurntableAdTime);
    }
    if (TurntableAdCDTime.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(TurntableAdCDTime);
    }
    if (DiamodGrowthFundTime.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(DiamodGrowthFundTime);
    }
    if (GoldGrowthFundTime.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(GoldGrowthFundTime);
    }
    if (diamodGrowthFundReward_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DiamodGrowthFundReward);
    }
    if (goldGrowthFundReward_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(GoldGrowthFundReward);
    }
    if (PvpAutoRefreshTime.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(PvpAutoRefreshTime);
    }
    if (PvpManualRefreshTime.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(PvpManualRefreshTime);
    }
    if (PvpFirstSucceed != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(PvpFirstSucceed);
    }
    if (PvpTimes != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(PvpTimes);
    }
    if (PvpKey != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(PvpKey);
    }
    if (PvpGetDayReward != false) {
      size += 2 + 1;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerPb other) {
    if (other == null) {
      return;
    }
    if (other.Pid != 0) {
      Pid = other.Pid;
    }
    if (other.Account.Length != 0) {
      Account = other.Account;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Icon.Length != 0) {
      Icon = other.Icon;
    }
    if (other.Prower != 0) {
      Prower = other.Prower;
    }
    if (other.Exp != 0) {
      Exp = other.Exp;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.Stage != 0) {
      Stage = other.Stage;
    }
    if (other.ShopBuyGoldFirst.Length != 0) {
      ShopBuyGoldFirst = other.ShopBuyGoldFirst;
    }
    if (other.ShopBuyDiamondFirst.Length != 0) {
      ShopBuyDiamondFirst = other.ShopBuyDiamondFirst;
    }
    if (other.Gold != 0) {
      Gold = other.Gold;
    }
    if (other.Diamond != 0) {
      Diamond = other.Diamond;
    }
    if (other.EndlessTower != 0) {
      EndlessTower = other.EndlessTower;
    }
    if (other.ShopCardKey != 0) {
      ShopCardKey = other.ShopCardKey;
    }
    if (other.TurntableKey != 0) {
      TurntableKey = other.TurntableKey;
    }
    if (other.TotalHeroCount != 0) {
      TotalHeroCount = other.TotalHeroCount;
    }
    if (other.heroDataList_ != null) {
      if (heroDataList_ == null) {
        heroDataList_ = new global::HeroDataList();
      }
      HeroDataList.MergeFrom(other.HeroDataList);
    }
    if (other.stoneDataList_ != null) {
      if (stoneDataList_ == null) {
        stoneDataList_ = new global::StoneDataList();
      }
      StoneDataList.MergeFrom(other.StoneDataList);
    }
    if (other.formationDataList_ != null) {
      if (formationDataList_ == null) {
        formationDataList_ = new global::FormationDataList();
      }
      FormationDataList.MergeFrom(other.FormationDataList);
    }
    if (other.OfferRewardTaskLevel != 0) {
      OfferRewardTaskLevel = other.OfferRewardTaskLevel;
    }
    if (other.OfferRewardCount.Length != 0) {
      OfferRewardCount = other.OfferRewardCount;
    }
    if (other.OfferRewardTask.Length != 0) {
      OfferRewardTask = other.OfferRewardTask;
    }
    if (other.CardData.Length != 0) {
      CardData = other.CardData;
    }
    if (other.HaveEquipmentData.Length != 0) {
      HaveEquipmentData = other.HaveEquipmentData;
    }
    if (other.WearEquipmentData.Length != 0) {
      WearEquipmentData = other.WearEquipmentData;
    }
    if (other.TalentData.Length != 0) {
      TalentData = other.TalentData;
    }
    if (other.ShopCardTime.Length != 0) {
      ShopCardTime = other.ShopCardTime;
    }
    if (other.HangUpTime.Length != 0) {
      HangUpTime = other.HangUpTime;
    }
    if (other.ShopEqTime.Length != 0) {
      ShopEqTime = other.ShopEqTime;
    }
    if (other.OfferRewardTime.Length != 0) {
      OfferRewardTime = other.OfferRewardTime;
    }
    if (other.BossChallengedTime != 0) {
      BossChallengedTime = other.BossChallengedTime;
    }
    if (other.GoldChallengedTime != 0) {
      GoldChallengedTime = other.GoldChallengedTime;
    }
    if (other.SurpriseBoxTime != 0) {
      SurpriseBoxTime = other.SurpriseBoxTime;
    }
    if (other.BuleMonthCardTime.Length != 0) {
      BuleMonthCardTime = other.BuleMonthCardTime;
    }
    if (other.PurpleMonthCardTime.Length != 0) {
      PurpleMonthCardTime = other.PurpleMonthCardTime;
    }
    if (other.BuleMonthCardDailyRewardTime != 0) {
      BuleMonthCardDailyRewardTime = other.BuleMonthCardDailyRewardTime;
    }
    if (other.PurpleMonthCardDailyRewardTime != 0) {
      PurpleMonthCardDailyRewardTime = other.PurpleMonthCardDailyRewardTime;
    }
    if (other.DailyLoginZeroTime.Length != 0) {
      DailyLoginZeroTime = other.DailyLoginZeroTime;
    }
    if (other.PlayTimes != 0) {
      PlayTimes = other.PlayTimes;
    }
    if (other.TurntableAdTime != 0) {
      TurntableAdTime = other.TurntableAdTime;
    }
    if (other.TurntableAdCDTime.Length != 0) {
      TurntableAdCDTime = other.TurntableAdCDTime;
    }
    if (other.DiamodGrowthFundTime.Length != 0) {
      DiamodGrowthFundTime = other.DiamodGrowthFundTime;
    }
    if (other.GoldGrowthFundTime.Length != 0) {
      GoldGrowthFundTime = other.GoldGrowthFundTime;
    }
    if (other.diamodGrowthFundReward_ != null) {
      if (diamodGrowthFundReward_ == null) {
        diamodGrowthFundReward_ = new global::BoolList();
      }
      DiamodGrowthFundReward.MergeFrom(other.DiamodGrowthFundReward);
    }
    if (other.goldGrowthFundReward_ != null) {
      if (goldGrowthFundReward_ == null) {
        goldGrowthFundReward_ = new global::BoolList();
      }
      GoldGrowthFundReward.MergeFrom(other.GoldGrowthFundReward);
    }
    if (other.PvpAutoRefreshTime.Length != 0) {
      PvpAutoRefreshTime = other.PvpAutoRefreshTime;
    }
    if (other.PvpManualRefreshTime.Length != 0) {
      PvpManualRefreshTime = other.PvpManualRefreshTime;
    }
    if (other.PvpFirstSucceed != 0) {
      PvpFirstSucceed = other.PvpFirstSucceed;
    }
    if (other.PvpTimes != 0) {
      PvpTimes = other.PvpTimes;
    }
    if (other.PvpKey != 0) {
      PvpKey = other.PvpKey;
    }
    if (other.PvpGetDayReward != false) {
      PvpGetDayReward = other.PvpGetDayReward;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Pid = input.ReadInt32();
          break;
        }
        case 18: {
          Account = input.ReadString();
          break;
        }
        case 26: {
          Name = input.ReadString();
          break;
        }
        case 34: {
          Icon = input.ReadString();
          break;
        }
        case 40: {
          Prower = input.ReadInt32();
          break;
        }
        case 48: {
          Exp = input.ReadInt32();
          break;
        }
        case 56: {
          Level = input.ReadInt32();
          break;
        }
        case 64: {
          Stage = input.ReadInt32();
          break;
        }
        case 74: {
          ShopBuyGoldFirst = input.ReadString();
          break;
        }
        case 82: {
          ShopBuyDiamondFirst = input.ReadString();
          break;
        }
        case 88: {
          Gold = input.ReadInt32();
          break;
        }
        case 96: {
          Diamond = input.ReadInt32();
          break;
        }
        case 104: {
          EndlessTower = input.ReadInt32();
          break;
        }
        case 112: {
          ShopCardKey = input.ReadInt32();
          break;
        }
        case 120: {
          TurntableKey = input.ReadInt32();
          break;
        }
        case 128: {
          TotalHeroCount = input.ReadInt32();
          break;
        }
        case 138: {
          if (heroDataList_ == null) {
            heroDataList_ = new global::HeroDataList();
          }
          input.ReadMessage(heroDataList_);
          break;
        }
        case 146: {
          if (stoneDataList_ == null) {
            stoneDataList_ = new global::StoneDataList();
          }
          input.ReadMessage(stoneDataList_);
          break;
        }
        case 154: {
          if (formationDataList_ == null) {
            formationDataList_ = new global::FormationDataList();
          }
          input.ReadMessage(formationDataList_);
          break;
        }
        case 160: {
          OfferRewardTaskLevel = input.ReadInt32();
          break;
        }
        case 170: {
          OfferRewardCount = input.ReadString();
          break;
        }
        case 178: {
          OfferRewardTask = input.ReadString();
          break;
        }
        case 186: {
          CardData = input.ReadString();
          break;
        }
        case 194: {
          HaveEquipmentData = input.ReadString();
          break;
        }
        case 202: {
          WearEquipmentData = input.ReadString();
          break;
        }
        case 210: {
          TalentData = input.ReadString();
          break;
        }
        case 218: {
          ShopCardTime = input.ReadString();
          break;
        }
        case 226: {
          HangUpTime = input.ReadString();
          break;
        }
        case 234: {
          ShopEqTime = input.ReadString();
          break;
        }
        case 242: {
          OfferRewardTime = input.ReadString();
          break;
        }
        case 248: {
          BossChallengedTime = input.ReadInt32();
          break;
        }
        case 256: {
          GoldChallengedTime = input.ReadInt32();
          break;
        }
        case 264: {
          SurpriseBoxTime = input.ReadInt32();
          break;
        }
        case 274: {
          BuleMonthCardTime = input.ReadString();
          break;
        }
        case 282: {
          PurpleMonthCardTime = input.ReadString();
          break;
        }
        case 288: {
          BuleMonthCardDailyRewardTime = input.ReadInt32();
          break;
        }
        case 296: {
          PurpleMonthCardDailyRewardTime = input.ReadInt32();
          break;
        }
        case 306: {
          DailyLoginZeroTime = input.ReadString();
          break;
        }
        case 312: {
          PlayTimes = input.ReadInt32();
          break;
        }
        case 320: {
          TurntableAdTime = input.ReadInt32();
          break;
        }
        case 330: {
          TurntableAdCDTime = input.ReadString();
          break;
        }
        case 338: {
          DiamodGrowthFundTime = input.ReadString();
          break;
        }
        case 346: {
          GoldGrowthFundTime = input.ReadString();
          break;
        }
        case 354: {
          if (diamodGrowthFundReward_ == null) {
            diamodGrowthFundReward_ = new global::BoolList();
          }
          input.ReadMessage(diamodGrowthFundReward_);
          break;
        }
        case 362: {
          if (goldGrowthFundReward_ == null) {
            goldGrowthFundReward_ = new global::BoolList();
          }
          input.ReadMessage(goldGrowthFundReward_);
          break;
        }
        case 370: {
          PvpAutoRefreshTime = input.ReadString();
          break;
        }
        case 378: {
          PvpManualRefreshTime = input.ReadString();
          break;
        }
        case 384: {
          PvpFirstSucceed = input.ReadInt32();
          break;
        }
        case 472: {
          PvpTimes = input.ReadInt32();
          break;
        }
        case 480: {
          PvpKey = input.ReadInt32();
          break;
        }
        case 488: {
          PvpGetDayReward = input.ReadBool();
          break;
        }
      }
    }
  }

}

/// <summary>
///奖励
/// </summary>
public sealed partial class RewardPb : pb::IMessage<RewardPb> {
  private static readonly pb::MessageParser<RewardPb> _parser = new pb::MessageParser<RewardPb>(() => new RewardPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RewardPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RewardPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RewardPb(RewardPb other) : this() {
    id_ = other.id_;
    num_ = other.num_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RewardPb Clone() {
    return new RewardPb(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "num" field.</summary>
  public const int NumFieldNumber = 2;
  private int num_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Num {
    get { return num_; }
    set {
      num_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RewardPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RewardPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Num != other.Num) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (Num != 0) hash ^= Num.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (Num != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Num);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (Num != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RewardPb other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.Num != 0) {
      Num = other.Num;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 16: {
          Num = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///邮件
/// </summary>
public sealed partial class MailPb : pb::IMessage<MailPb> {
  private static readonly pb::MessageParser<MailPb> _parser = new pb::MessageParser<MailPb>(() => new MailPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MailPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MailPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MailPb(MailPb other) : this() {
    id_ = other.id_;
    title_ = other.title_;
    content_ = other.content_;
    reward_ = other.reward_.Clone();
    state_ = other.state_;
    deltime_ = other.deltime_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MailPb Clone() {
    return new MailPb(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "title" field.</summary>
  public const int TitleFieldNumber = 2;
  private string title_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Title {
    get { return title_; }
    set {
      title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "content" field.</summary>
  public const int ContentFieldNumber = 3;
  private string content_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Content {
    get { return content_; }
    set {
      content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "reward" field.</summary>
  public const int RewardFieldNumber = 4;
  private static readonly pb::FieldCodec<global::RewardPb> _repeated_reward_codec
      = pb::FieldCodec.ForMessage(34, global::RewardPb.Parser);
  private readonly pbc::RepeatedField<global::RewardPb> reward_ = new pbc::RepeatedField<global::RewardPb>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::RewardPb> Reward {
    get { return reward_; }
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 5;
  private int state_;
  /// <summary>
  ///0-新邮件 1-已读 2-已领 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int State {
    get { return state_; }
    set {
      state_ = value;
    }
  }

  /// <summary>Field number for the "deltime" field.</summary>
  public const int DeltimeFieldNumber = 6;
  private int deltime_;
  /// <summary>
  ///删除时间 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Deltime {
    get { return deltime_; }
    set {
      deltime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MailPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MailPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Title != other.Title) return false;
    if (Content != other.Content) return false;
    if(!reward_.Equals(other.reward_)) return false;
    if (State != other.State) return false;
    if (Deltime != other.Deltime) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (Title.Length != 0) hash ^= Title.GetHashCode();
    if (Content.Length != 0) hash ^= Content.GetHashCode();
    hash ^= reward_.GetHashCode();
    if (State != 0) hash ^= State.GetHashCode();
    if (Deltime != 0) hash ^= Deltime.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (Title.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Title);
    }
    if (Content.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Content);
    }
    reward_.WriteTo(output, _repeated_reward_codec);
    if (State != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(State);
    }
    if (Deltime != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(Deltime);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (Title.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
    }
    if (Content.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
    }
    size += reward_.CalculateSize(_repeated_reward_codec);
    if (State != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
    }
    if (Deltime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Deltime);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MailPb other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.Title.Length != 0) {
      Title = other.Title;
    }
    if (other.Content.Length != 0) {
      Content = other.Content;
    }
    reward_.Add(other.reward_);
    if (other.State != 0) {
      State = other.State;
    }
    if (other.Deltime != 0) {
      Deltime = other.Deltime;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 18: {
          Title = input.ReadString();
          break;
        }
        case 26: {
          Content = input.ReadString();
          break;
        }
        case 34: {
          reward_.AddEntriesFrom(input, _repeated_reward_codec);
          break;
        }
        case 40: {
          State = input.ReadInt32();
          break;
        }
        case 48: {
          Deltime = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///排行榜
/// </summary>
public sealed partial class RankPb : pb::IMessage<RankPb> {
  private static readonly pb::MessageParser<RankPb> _parser = new pb::MessageParser<RankPb>(() => new RankPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RankPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RankPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RankPb(RankPb other) : this() {
    pid_ = other.pid_;
    name_ = other.name_;
    icon_ = other.icon_;
    prower_ = other.prower_;
    stage_ = other.stage_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RankPb Clone() {
    return new RankPb(this);
  }

  /// <summary>Field number for the "pid" field.</summary>
  public const int PidFieldNumber = 1;
  private int pid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pid {
    get { return pid_; }
    set {
      pid_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "icon" field.</summary>
  public const int IconFieldNumber = 3;
  private string icon_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Icon {
    get { return icon_; }
    set {
      icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "prower" field.</summary>
  public const int ProwerFieldNumber = 4;
  private int prower_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Prower {
    get { return prower_; }
    set {
      prower_ = value;
    }
  }

  /// <summary>Field number for the "stage" field.</summary>
  public const int StageFieldNumber = 5;
  private int stage_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Stage {
    get { return stage_; }
    set {
      stage_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RankPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RankPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Pid != other.Pid) return false;
    if (Name != other.Name) return false;
    if (Icon != other.Icon) return false;
    if (Prower != other.Prower) return false;
    if (Stage != other.Stage) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Pid != 0) hash ^= Pid.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Icon.Length != 0) hash ^= Icon.GetHashCode();
    if (Prower != 0) hash ^= Prower.GetHashCode();
    if (Stage != 0) hash ^= Stage.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Pid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Pid);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (Icon.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Icon);
    }
    if (Prower != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Prower);
    }
    if (Stage != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Stage);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Pid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Icon.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
    }
    if (Prower != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Prower);
    }
    if (Stage != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stage);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RankPb other) {
    if (other == null) {
      return;
    }
    if (other.Pid != 0) {
      Pid = other.Pid;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Icon.Length != 0) {
      Icon = other.Icon;
    }
    if (other.Prower != 0) {
      Prower = other.Prower;
    }
    if (other.Stage != 0) {
      Stage = other.Stage;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Pid = input.ReadInt32();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Icon = input.ReadString();
          break;
        }
        case 32: {
          Prower = input.ReadInt32();
          break;
        }
        case 40: {
          Stage = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///接口返回错误
/// </summary>
public sealed partial class ErrorPb : pb::IMessage<ErrorPb> {
  private static readonly pb::MessageParser<ErrorPb> _parser = new pb::MessageParser<ErrorPb>(() => new ErrorPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ErrorPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ErrorPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ErrorPb(ErrorPb other) : this() {
    code_ = other.code_;
    reqId_ = other.reqId_;
    msg_ = other.msg_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ErrorPb Clone() {
    return new ErrorPb(this);
  }

  /// <summary>Field number for the "code" field.</summary>
  public const int CodeFieldNumber = 1;
  private int code_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Code {
    get { return code_; }
    set {
      code_ = value;
    }
  }

  /// <summary>Field number for the "reqId" field.</summary>
  public const int ReqIdFieldNumber = 2;
  private int reqId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ReqId {
    get { return reqId_; }
    set {
      reqId_ = value;
    }
  }

  /// <summary>Field number for the "msg" field.</summary>
  public const int MsgFieldNumber = 3;
  private string msg_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Msg {
    get { return msg_; }
    set {
      msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ErrorPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ErrorPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Code != other.Code) return false;
    if (ReqId != other.ReqId) return false;
    if (Msg != other.Msg) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Code != 0) hash ^= Code.GetHashCode();
    if (ReqId != 0) hash ^= ReqId.GetHashCode();
    if (Msg.Length != 0) hash ^= Msg.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Code != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Code);
    }
    if (ReqId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ReqId);
    }
    if (Msg.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Msg);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Code != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
    }
    if (ReqId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReqId);
    }
    if (Msg.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ErrorPb other) {
    if (other == null) {
      return;
    }
    if (other.Code != 0) {
      Code = other.Code;
    }
    if (other.ReqId != 0) {
      ReqId = other.ReqId;
    }
    if (other.Msg.Length != 0) {
      Msg = other.Msg;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Code = input.ReadInt32();
          break;
        }
        case 16: {
          ReqId = input.ReadInt32();
          break;
        }
        case 26: {
          Msg = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Pvp挑战列表单位信息
/// </summary>
public sealed partial class PvpChallengeListPb : pb::IMessage<PvpChallengeListPb> {
  private static readonly pb::MessageParser<PvpChallengeListPb> _parser = new pb::MessageParser<PvpChallengeListPb>(() => new PvpChallengeListPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PvpChallengeListPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpChallengeListPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpChallengeListPb(PvpChallengeListPb other) : this() {
    pid_ = other.pid_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpChallengeListPb Clone() {
    return new PvpChallengeListPb(this);
  }

  /// <summary>Field number for the "pid" field.</summary>
  public const int PidFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_pid_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> pid_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> Pid {
    get { return pid_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PvpChallengeListPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PvpChallengeListPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!pid_.Equals(other.pid_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= pid_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pid_.WriteTo(output, _repeated_pid_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += pid_.CalculateSize(_repeated_pid_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PvpChallengeListPb other) {
    if (other == null) {
      return;
    }
    pid_.Add(other.pid_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 8: {
          pid_.AddEntriesFrom(input, _repeated_pid_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Pvp敌方信息
/// </summary>
public sealed partial class PvpEnemyPb : pb::IMessage<PvpEnemyPb> {
  private static readonly pb::MessageParser<PvpEnemyPb> _parser = new pb::MessageParser<PvpEnemyPb>(() => new PvpEnemyPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PvpEnemyPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpEnemyPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpEnemyPb(PvpEnemyPb other) : this() {
    pid_ = other.pid_;
    name_ = other.name_;
    icon_ = other.icon_;
    level_ = other.level_;
    integral_ = other.integral_;
    HeroDataList = other.heroDataList_ != null ? other.HeroDataList.Clone() : null;
    FormationDataList = other.formationDataList_ != null ? other.FormationDataList.Clone() : null;
    cardData_ = other.cardData_;
    wearEquipmentData_ = other.wearEquipmentData_;
    talentData_ = other.talentData_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpEnemyPb Clone() {
    return new PvpEnemyPb(this);
  }

  /// <summary>Field number for the "pid" field.</summary>
  public const int PidFieldNumber = 1;
  private int pid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pid {
    get { return pid_; }
    set {
      pid_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "icon" field.</summary>
  public const int IconFieldNumber = 3;
  private string icon_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Icon {
    get { return icon_; }
    set {
      icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 4;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "integral" field.</summary>
  public const int IntegralFieldNumber = 5;
  private int integral_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Integral {
    get { return integral_; }
    set {
      integral_ = value;
    }
  }

  /// <summary>Field number for the "heroDataList" field.</summary>
  public const int HeroDataListFieldNumber = 6;
  private global::HeroDataList heroDataList_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::HeroDataList HeroDataList {
    get { return heroDataList_; }
    set {
      heroDataList_ = value;
    }
  }

  /// <summary>Field number for the "formationDataList" field.</summary>
  public const int FormationDataListFieldNumber = 7;
  private global::FormationDataList formationDataList_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::FormationDataList FormationDataList {
    get { return formationDataList_; }
    set {
      formationDataList_ = value;
    }
  }

  /// <summary>Field number for the "cardData" field.</summary>
  public const int CardDataFieldNumber = 8;
  private string cardData_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string CardData {
    get { return cardData_; }
    set {
      cardData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "wearEquipmentData" field.</summary>
  public const int WearEquipmentDataFieldNumber = 9;
  private string wearEquipmentData_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string WearEquipmentData {
    get { return wearEquipmentData_; }
    set {
      wearEquipmentData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "talentData" field.</summary>
  public const int TalentDataFieldNumber = 10;
  private string talentData_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TalentData {
    get { return talentData_; }
    set {
      talentData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PvpEnemyPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PvpEnemyPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Pid != other.Pid) return false;
    if (Name != other.Name) return false;
    if (Icon != other.Icon) return false;
    if (Level != other.Level) return false;
    if (Integral != other.Integral) return false;
    if (!object.Equals(HeroDataList, other.HeroDataList)) return false;
    if (!object.Equals(FormationDataList, other.FormationDataList)) return false;
    if (CardData != other.CardData) return false;
    if (WearEquipmentData != other.WearEquipmentData) return false;
    if (TalentData != other.TalentData) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Pid != 0) hash ^= Pid.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Icon.Length != 0) hash ^= Icon.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (Integral != 0) hash ^= Integral.GetHashCode();
    if (heroDataList_ != null) hash ^= HeroDataList.GetHashCode();
    if (formationDataList_ != null) hash ^= FormationDataList.GetHashCode();
    if (CardData.Length != 0) hash ^= CardData.GetHashCode();
    if (WearEquipmentData.Length != 0) hash ^= WearEquipmentData.GetHashCode();
    if (TalentData.Length != 0) hash ^= TalentData.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Pid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Pid);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (Icon.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Icon);
    }
    if (Level != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Level);
    }
    if (Integral != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Integral);
    }
    if (heroDataList_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(HeroDataList);
    }
    if (formationDataList_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(FormationDataList);
    }
    if (CardData.Length != 0) {
      output.WriteRawTag(66);
      output.WriteString(CardData);
    }
    if (WearEquipmentData.Length != 0) {
      output.WriteRawTag(74);
      output.WriteString(WearEquipmentData);
    }
    if (TalentData.Length != 0) {
      output.WriteRawTag(82);
      output.WriteString(TalentData);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Pid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Icon.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (Integral != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Integral);
    }
    if (heroDataList_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(HeroDataList);
    }
    if (formationDataList_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(FormationDataList);
    }
    if (CardData.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(CardData);
    }
    if (WearEquipmentData.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(WearEquipmentData);
    }
    if (TalentData.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TalentData);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PvpEnemyPb other) {
    if (other == null) {
      return;
    }
    if (other.Pid != 0) {
      Pid = other.Pid;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Icon.Length != 0) {
      Icon = other.Icon;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.Integral != 0) {
      Integral = other.Integral;
    }
    if (other.heroDataList_ != null) {
      if (heroDataList_ == null) {
        heroDataList_ = new global::HeroDataList();
      }
      HeroDataList.MergeFrom(other.HeroDataList);
    }
    if (other.formationDataList_ != null) {
      if (formationDataList_ == null) {
        formationDataList_ = new global::FormationDataList();
      }
      FormationDataList.MergeFrom(other.FormationDataList);
    }
    if (other.CardData.Length != 0) {
      CardData = other.CardData;
    }
    if (other.WearEquipmentData.Length != 0) {
      WearEquipmentData = other.WearEquipmentData;
    }
    if (other.TalentData.Length != 0) {
      TalentData = other.TalentData;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Pid = input.ReadInt32();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Icon = input.ReadString();
          break;
        }
        case 32: {
          Level = input.ReadInt32();
          break;
        }
        case 40: {
          Integral = input.ReadInt32();
          break;
        }
        case 50: {
          if (heroDataList_ == null) {
            heroDataList_ = new global::HeroDataList();
          }
          input.ReadMessage(heroDataList_);
          break;
        }
        case 58: {
          if (formationDataList_ == null) {
            formationDataList_ = new global::FormationDataList();
          }
          input.ReadMessage(formationDataList_);
          break;
        }
        case 66: {
          CardData = input.ReadString();
          break;
        }
        case 74: {
          WearEquipmentData = input.ReadString();
          break;
        }
        case 82: {
          TalentData = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///个人排行  pb
/// </summary>
public sealed partial class PersonRankPb : pb::IMessage<PersonRankPb> {
  private static readonly pb::MessageParser<PersonRankPb> _parser = new pb::MessageParser<PersonRankPb>(() => new PersonRankPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PersonRankPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PersonRankPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PersonRankPb(PersonRankPb other) : this() {
    pid_ = other.pid_;
    level_ = other.level_;
    icon_ = other.icon_;
    name_ = other.name_;
    integral_ = other.integral_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PersonRankPb Clone() {
    return new PersonRankPb(this);
  }

  /// <summary>Field number for the "pid" field.</summary>
  public const int PidFieldNumber = 1;
  private int pid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pid {
    get { return pid_; }
    set {
      pid_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 2;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "icon" field.</summary>
  public const int IconFieldNumber = 3;
  private string icon_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Icon {
    get { return icon_; }
    set {
      icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 4;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "integral" field.</summary>
  public const int IntegralFieldNumber = 5;
  private int integral_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Integral {
    get { return integral_; }
    set {
      integral_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PersonRankPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PersonRankPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Pid != other.Pid) return false;
    if (Level != other.Level) return false;
    if (Icon != other.Icon) return false;
    if (Name != other.Name) return false;
    if (Integral != other.Integral) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Pid != 0) hash ^= Pid.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (Icon.Length != 0) hash ^= Icon.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Integral != 0) hash ^= Integral.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Pid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Pid);
    }
    if (Level != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Level);
    }
    if (Icon.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Icon);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Name);
    }
    if (Integral != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Integral);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Pid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (Icon.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Integral != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Integral);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PersonRankPb other) {
    if (other == null) {
      return;
    }
    if (other.Pid != 0) {
      Pid = other.Pid;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.Icon.Length != 0) {
      Icon = other.Icon;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Integral != 0) {
      Integral = other.Integral;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Pid = input.ReadInt32();
          break;
        }
        case 16: {
          Level = input.ReadInt32();
          break;
        }
        case 26: {
          Icon = input.ReadString();
          break;
        }
        case 34: {
          Name = input.ReadString();
          break;
        }
        case 40: {
          Integral = input.ReadInt32();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
