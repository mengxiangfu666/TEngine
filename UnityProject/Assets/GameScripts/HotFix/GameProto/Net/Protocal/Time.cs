// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: time.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from time.proto</summary>
public static partial class TimeReflection {

  #region Descriptor
  /// <summary>File descriptor for time.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static TimeReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cgp0aW1lLnByb3RvIq4CChJUaW1lRGF5UmVmcmVhc2hSZXESGgoSZGFpbHlM",
          "b2dpblplcm9UaW1lGAEgASgJEiQKHGJ1bGVNb250aENhcmREYWlseVJld2Fy",
          "ZFRpbWUYAiABKAUSJgoecHVycGxlTW9udGhDYXJkRGFpbHlSZXdhcmRUaW1l",
          "GAMgASgFEhcKD3N1cnByaXNlQm94VGltZRgEIAEoBRIaChJib3NzQ2hhbGxl",
          "bmdlZFRpbWUYBSABKAUSGgoSZ29sZENoYWxsZW5nZWRUaW1lGAYgASgFEhcK",
          "D3R1cm50YWJsZUFkVGltZRgHIAEoBRIZChF0dXJudGFibGVBZENEVGltZRgI",
          "IAEoCRIQCghwdnBUaW1lcxgJIAEoBRIXCg9wdnBHZXREYXlSZXdhcmQYCiAB",
          "KAgiFQoTVGltZURheVJlZnJlYXNoUmVzcCKWAQoTVGltZUhhbmdVcFJld2Fy",
          "ZFJlcRISCgpoYW5nVXBUaW1lGAEgASgJEjgKCmNoYW5nZUl0ZW0YAiADKAsy",
          "JC5UaW1lSGFuZ1VwUmV3YXJkUmVxLkNoYW5nZUl0ZW1FbnRyeRoxCg9DaGFu",
          "Z2VJdGVtRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4ASIW",
          "ChRUaW1lSGFuZ1VwUmV3YXJkUmVzcEIUCgpjb20uY2IubXNnQgZQQlRpbWVi",
          "BnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::TimeDayRefreashReq), global::TimeDayRefreashReq.Parser, new[]{ "DailyLoginZeroTime", "BuleMonthCardDailyRewardTime", "PurpleMonthCardDailyRewardTime", "SurpriseBoxTime", "BossChallengedTime", "GoldChallengedTime", "TurntableAdTime", "TurntableAdCDTime", "PvpTimes", "PvpGetDayReward" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TimeDayRefreashResp), global::TimeDayRefreashResp.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TimeHangUpRewardReq), global::TimeHangUpRewardReq.Parser, new[]{ "HangUpTime", "ChangeItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::TimeHangUpRewardResp), global::TimeHangUpRewardResp.Parser, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
///每天刷新的数据相关
/// </summary>
public sealed partial class TimeDayRefreashReq : pb::IMessage<TimeDayRefreashReq> {
  private static readonly pb::MessageParser<TimeDayRefreashReq> _parser = new pb::MessageParser<TimeDayRefreashReq>(() => new TimeDayRefreashReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TimeDayRefreashReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TimeReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TimeDayRefreashReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TimeDayRefreashReq(TimeDayRefreashReq other) : this() {
    dailyLoginZeroTime_ = other.dailyLoginZeroTime_;
    buleMonthCardDailyRewardTime_ = other.buleMonthCardDailyRewardTime_;
    purpleMonthCardDailyRewardTime_ = other.purpleMonthCardDailyRewardTime_;
    surpriseBoxTime_ = other.surpriseBoxTime_;
    bossChallengedTime_ = other.bossChallengedTime_;
    goldChallengedTime_ = other.goldChallengedTime_;
    turntableAdTime_ = other.turntableAdTime_;
    turntableAdCDTime_ = other.turntableAdCDTime_;
    pvpTimes_ = other.pvpTimes_;
    pvpGetDayReward_ = other.pvpGetDayReward_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TimeDayRefreashReq Clone() {
    return new TimeDayRefreashReq(this);
  }

  /// <summary>Field number for the "dailyLoginZeroTime" field.</summary>
  public const int DailyLoginZeroTimeFieldNumber = 1;
  private string dailyLoginZeroTime_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DailyLoginZeroTime {
    get { return dailyLoginZeroTime_; }
    set {
      dailyLoginZeroTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "buleMonthCardDailyRewardTime" field.</summary>
  public const int BuleMonthCardDailyRewardTimeFieldNumber = 2;
  private int buleMonthCardDailyRewardTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BuleMonthCardDailyRewardTime {
    get { return buleMonthCardDailyRewardTime_; }
    set {
      buleMonthCardDailyRewardTime_ = value;
    }
  }

  /// <summary>Field number for the "purpleMonthCardDailyRewardTime" field.</summary>
  public const int PurpleMonthCardDailyRewardTimeFieldNumber = 3;
  private int purpleMonthCardDailyRewardTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PurpleMonthCardDailyRewardTime {
    get { return purpleMonthCardDailyRewardTime_; }
    set {
      purpleMonthCardDailyRewardTime_ = value;
    }
  }

  /// <summary>Field number for the "surpriseBoxTime" field.</summary>
  public const int SurpriseBoxTimeFieldNumber = 4;
  private int surpriseBoxTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SurpriseBoxTime {
    get { return surpriseBoxTime_; }
    set {
      surpriseBoxTime_ = value;
    }
  }

  /// <summary>Field number for the "bossChallengedTime" field.</summary>
  public const int BossChallengedTimeFieldNumber = 5;
  private int bossChallengedTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BossChallengedTime {
    get { return bossChallengedTime_; }
    set {
      bossChallengedTime_ = value;
    }
  }

  /// <summary>Field number for the "goldChallengedTime" field.</summary>
  public const int GoldChallengedTimeFieldNumber = 6;
  private int goldChallengedTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GoldChallengedTime {
    get { return goldChallengedTime_; }
    set {
      goldChallengedTime_ = value;
    }
  }

  /// <summary>Field number for the "turntableAdTime" field.</summary>
  public const int TurntableAdTimeFieldNumber = 7;
  private int turntableAdTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TurntableAdTime {
    get { return turntableAdTime_; }
    set {
      turntableAdTime_ = value;
    }
  }

  /// <summary>Field number for the "turntableAdCDTime" field.</summary>
  public const int TurntableAdCDTimeFieldNumber = 8;
  private string turntableAdCDTime_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TurntableAdCDTime {
    get { return turntableAdCDTime_; }
    set {
      turntableAdCDTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "pvpTimes" field.</summary>
  public const int PvpTimesFieldNumber = 9;
  private int pvpTimes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PvpTimes {
    get { return pvpTimes_; }
    set {
      pvpTimes_ = value;
    }
  }

  /// <summary>Field number for the "pvpGetDayReward" field.</summary>
  public const int PvpGetDayRewardFieldNumber = 10;
  private bool pvpGetDayReward_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool PvpGetDayReward {
    get { return pvpGetDayReward_; }
    set {
      pvpGetDayReward_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TimeDayRefreashReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TimeDayRefreashReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DailyLoginZeroTime != other.DailyLoginZeroTime) return false;
    if (BuleMonthCardDailyRewardTime != other.BuleMonthCardDailyRewardTime) return false;
    if (PurpleMonthCardDailyRewardTime != other.PurpleMonthCardDailyRewardTime) return false;
    if (SurpriseBoxTime != other.SurpriseBoxTime) return false;
    if (BossChallengedTime != other.BossChallengedTime) return false;
    if (GoldChallengedTime != other.GoldChallengedTime) return false;
    if (TurntableAdTime != other.TurntableAdTime) return false;
    if (TurntableAdCDTime != other.TurntableAdCDTime) return false;
    if (PvpTimes != other.PvpTimes) return false;
    if (PvpGetDayReward != other.PvpGetDayReward) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DailyLoginZeroTime.Length != 0) hash ^= DailyLoginZeroTime.GetHashCode();
    if (BuleMonthCardDailyRewardTime != 0) hash ^= BuleMonthCardDailyRewardTime.GetHashCode();
    if (PurpleMonthCardDailyRewardTime != 0) hash ^= PurpleMonthCardDailyRewardTime.GetHashCode();
    if (SurpriseBoxTime != 0) hash ^= SurpriseBoxTime.GetHashCode();
    if (BossChallengedTime != 0) hash ^= BossChallengedTime.GetHashCode();
    if (GoldChallengedTime != 0) hash ^= GoldChallengedTime.GetHashCode();
    if (TurntableAdTime != 0) hash ^= TurntableAdTime.GetHashCode();
    if (TurntableAdCDTime.Length != 0) hash ^= TurntableAdCDTime.GetHashCode();
    if (PvpTimes != 0) hash ^= PvpTimes.GetHashCode();
    if (PvpGetDayReward != false) hash ^= PvpGetDayReward.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DailyLoginZeroTime.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(DailyLoginZeroTime);
    }
    if (BuleMonthCardDailyRewardTime != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(BuleMonthCardDailyRewardTime);
    }
    if (PurpleMonthCardDailyRewardTime != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(PurpleMonthCardDailyRewardTime);
    }
    if (SurpriseBoxTime != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(SurpriseBoxTime);
    }
    if (BossChallengedTime != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(BossChallengedTime);
    }
    if (GoldChallengedTime != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(GoldChallengedTime);
    }
    if (TurntableAdTime != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(TurntableAdTime);
    }
    if (TurntableAdCDTime.Length != 0) {
      output.WriteRawTag(66);
      output.WriteString(TurntableAdCDTime);
    }
    if (PvpTimes != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(PvpTimes);
    }
    if (PvpGetDayReward != false) {
      output.WriteRawTag(80);
      output.WriteBool(PvpGetDayReward);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DailyLoginZeroTime.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DailyLoginZeroTime);
    }
    if (BuleMonthCardDailyRewardTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuleMonthCardDailyRewardTime);
    }
    if (PurpleMonthCardDailyRewardTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PurpleMonthCardDailyRewardTime);
    }
    if (SurpriseBoxTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SurpriseBoxTime);
    }
    if (BossChallengedTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BossChallengedTime);
    }
    if (GoldChallengedTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoldChallengedTime);
    }
    if (TurntableAdTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TurntableAdTime);
    }
    if (TurntableAdCDTime.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TurntableAdCDTime);
    }
    if (PvpTimes != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PvpTimes);
    }
    if (PvpGetDayReward != false) {
      size += 1 + 1;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TimeDayRefreashReq other) {
    if (other == null) {
      return;
    }
    if (other.DailyLoginZeroTime.Length != 0) {
      DailyLoginZeroTime = other.DailyLoginZeroTime;
    }
    if (other.BuleMonthCardDailyRewardTime != 0) {
      BuleMonthCardDailyRewardTime = other.BuleMonthCardDailyRewardTime;
    }
    if (other.PurpleMonthCardDailyRewardTime != 0) {
      PurpleMonthCardDailyRewardTime = other.PurpleMonthCardDailyRewardTime;
    }
    if (other.SurpriseBoxTime != 0) {
      SurpriseBoxTime = other.SurpriseBoxTime;
    }
    if (other.BossChallengedTime != 0) {
      BossChallengedTime = other.BossChallengedTime;
    }
    if (other.GoldChallengedTime != 0) {
      GoldChallengedTime = other.GoldChallengedTime;
    }
    if (other.TurntableAdTime != 0) {
      TurntableAdTime = other.TurntableAdTime;
    }
    if (other.TurntableAdCDTime.Length != 0) {
      TurntableAdCDTime = other.TurntableAdCDTime;
    }
    if (other.PvpTimes != 0) {
      PvpTimes = other.PvpTimes;
    }
    if (other.PvpGetDayReward != false) {
      PvpGetDayReward = other.PvpGetDayReward;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          DailyLoginZeroTime = input.ReadString();
          break;
        }
        case 16: {
          BuleMonthCardDailyRewardTime = input.ReadInt32();
          break;
        }
        case 24: {
          PurpleMonthCardDailyRewardTime = input.ReadInt32();
          break;
        }
        case 32: {
          SurpriseBoxTime = input.ReadInt32();
          break;
        }
        case 40: {
          BossChallengedTime = input.ReadInt32();
          break;
        }
        case 48: {
          GoldChallengedTime = input.ReadInt32();
          break;
        }
        case 56: {
          TurntableAdTime = input.ReadInt32();
          break;
        }
        case 66: {
          TurntableAdCDTime = input.ReadString();
          break;
        }
        case 72: {
          PvpTimes = input.ReadInt32();
          break;
        }
        case 80: {
          PvpGetDayReward = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class TimeDayRefreashResp : pb::IMessage<TimeDayRefreashResp> {
  private static readonly pb::MessageParser<TimeDayRefreashResp> _parser = new pb::MessageParser<TimeDayRefreashResp>(() => new TimeDayRefreashResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TimeDayRefreashResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TimeReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TimeDayRefreashResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TimeDayRefreashResp(TimeDayRefreashResp other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TimeDayRefreashResp Clone() {
    return new TimeDayRefreashResp(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TimeDayRefreashResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TimeDayRefreashResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TimeDayRefreashResp other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

/// <summary>
/// 领取hangUp奖励
/// </summary>
public sealed partial class TimeHangUpRewardReq : pb::IMessage<TimeHangUpRewardReq> {
  private static readonly pb::MessageParser<TimeHangUpRewardReq> _parser = new pb::MessageParser<TimeHangUpRewardReq>(() => new TimeHangUpRewardReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TimeHangUpRewardReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TimeReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TimeHangUpRewardReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TimeHangUpRewardReq(TimeHangUpRewardReq other) : this() {
    hangUpTime_ = other.hangUpTime_;
    changeItem_ = other.changeItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TimeHangUpRewardReq Clone() {
    return new TimeHangUpRewardReq(this);
  }

  /// <summary>Field number for the "hangUpTime" field.</summary>
  public const int HangUpTimeFieldNumber = 1;
  private string hangUpTime_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HangUpTime {
    get { return hangUpTime_; }
    set {
      hangUpTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///改变的道具，客户端维护道具
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TimeHangUpRewardReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TimeHangUpRewardReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (HangUpTime != other.HangUpTime) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HangUpTime.Length != 0) hash ^= HangUpTime.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HangUpTime.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(HangUpTime);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HangUpTime.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HangUpTime);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TimeHangUpRewardReq other) {
    if (other == null) {
      return;
    }
    if (other.HangUpTime.Length != 0) {
      HangUpTime = other.HangUpTime;
    }
    changeItem_.Add(other.changeItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          HangUpTime = input.ReadString();
          break;
        }
        case 18: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class TimeHangUpRewardResp : pb::IMessage<TimeHangUpRewardResp> {
  private static readonly pb::MessageParser<TimeHangUpRewardResp> _parser = new pb::MessageParser<TimeHangUpRewardResp>(() => new TimeHangUpRewardResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TimeHangUpRewardResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TimeReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TimeHangUpRewardResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TimeHangUpRewardResp(TimeHangUpRewardResp other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TimeHangUpRewardResp Clone() {
    return new TimeHangUpRewardResp(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TimeHangUpRewardResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TimeHangUpRewardResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TimeHangUpRewardResp other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

#endregion


#endregion Designer generated code
