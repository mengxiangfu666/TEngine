// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pvp.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from pvp.proto</summary>
public static partial class PvpReflection {

  #region Descriptor
  /// <summary>File descriptor for pvp.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static PvpReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CglwdnAucHJvdG8aCmJlYW4ucHJvdG8iDgoMUHZwVW5sb2NrUmVxIg8KDVB2",
          "cFVubG9ja1Jlc3AiGgoKUHZwUmFua1JlcRIMCgRwYWdlGAEgASgFIloKC1B2",
          "cFJhbmtSZXNwEhsKBHJhbmsYASADKAsyDS5QZXJzb25SYW5rUGISGwoEc2Vs",
          "ZhgCIAEoCzINLlBlcnNvblJhbmtQYhIRCglzZWxmX3JhbmsYAyABKAUiswEK",
          "ClB2cExpc3RSZXESDQoFcGFyYW0YASABKAUSFwoPYXV0b1JlZnJlc2hUaW1l",
          "GAIgASgJEhkKEW1hbnVhbFJlZnJlc2hUaW1lGAMgASgJEi8KCmNoYW5nZUl0",
          "ZW0YBCADKAsyGy5QdnBMaXN0UmVxLkNoYW5nZUl0ZW1FbnRyeRoxCg9DaGFu",
          "Z2VJdGVtRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4ASIu",
          "CgtQdnBMaXN0UmVzcBIfCghwdnBFbmVteRgBIAMoCzINLlBlcnNvblJhbmtQ",
          "YiIsCgZQdnBSZXESEAoIZW5lbXlQaWQYASABKAUSEAoIcHZwVGltZXMYAiAB",
          "KAUiJQoHUHZwUmVzcBIaCgVlbmVteRgBIAEoCzILLlB2cEVuZW15UGIiqgEK",
          "C1B2cEZpbnNoUmVxEhAKCGVuZW15UGlkGAEgASgFEg4KBnJlc3VsdBgCIAEo",
          "BRIUCgxmaXJzdFN1Y2NlZWQYAyABKAUSMAoKY2hhbmdlSXRlbRgEIAMoCzIc",
          "LlB2cEZpbnNoUmVxLkNoYW5nZUl0ZW1FbnRyeRoxCg9DaGFuZ2VJdGVtRW50",
          "cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4ASIuCgxQdnBGaW5z",
          "aFJlc3ASEAoIaW50ZWdyYWwYASABKAUSDAoEcmFuaxgCIAEoBSKUAQoRUHZw",
          "RGFpbHlSZXdhcmRSZXESFAoMZ2V0RGF5UmV3YXJkGAEgASgIEjYKCmNoYW5n",
          "ZUl0ZW0YAiADKAsyIi5QdnBEYWlseVJld2FyZFJlcS5DaGFuZ2VJdGVtRW50",
          "cnkaMQoPQ2hhbmdlSXRlbUVudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgC",
          "IAEoBToCOAEiFAoSUHZwRGFpbHlSZXdhcmRSZXNwIooBCg5QdnBBZGRUaW1l",
          "c1JlcRIQCghwdnBUaW1lcxgBIAEoBRIzCgpjaGFuZ2VJdGVtGAIgAygLMh8u",
          "UHZwQWRkVGltZXNSZXEuQ2hhbmdlSXRlbUVudHJ5GjEKD0NoYW5nZUl0ZW1F",
          "bnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiABKAU6AjgBIhEKD1B2cEFk",
          "ZFRpbWVzUmVzcEITCgpjb20uY2IubXNnQgVQQlB2cGIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::BeanReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::PvpUnlockReq), global::PvpUnlockReq.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PvpUnlockResp), global::PvpUnlockResp.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PvpRankReq), global::PvpRankReq.Parser, new[]{ "Page" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PvpRankResp), global::PvpRankResp.Parser, new[]{ "Rank", "Self", "SelfRank" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PvpListReq), global::PvpListReq.Parser, new[]{ "Param", "AutoRefreshTime", "ManualRefreshTime", "ChangeItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::PvpListResp), global::PvpListResp.Parser, new[]{ "PvpEnemy" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PvpReq), global::PvpReq.Parser, new[]{ "EnemyPid", "PvpTimes" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PvpResp), global::PvpResp.Parser, new[]{ "Enemy" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PvpFinshReq), global::PvpFinshReq.Parser, new[]{ "EnemyPid", "Result", "FirstSucceed", "ChangeItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::PvpFinshResp), global::PvpFinshResp.Parser, new[]{ "Integral", "Rank" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PvpDailyRewardReq), global::PvpDailyRewardReq.Parser, new[]{ "GetDayReward", "ChangeItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::PvpDailyRewardResp), global::PvpDailyRewardResp.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PvpAddTimesReq), global::PvpAddTimesReq.Parser, new[]{ "PvpTimes", "ChangeItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::PvpAddTimesResp), global::PvpAddTimesResp.Parser, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
///解锁Pvp
/// </summary>
public sealed partial class PvpUnlockReq : pb::IMessage<PvpUnlockReq> {
  private static readonly pb::MessageParser<PvpUnlockReq> _parser = new pb::MessageParser<PvpUnlockReq>(() => new PvpUnlockReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PvpUnlockReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PvpReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpUnlockReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpUnlockReq(PvpUnlockReq other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpUnlockReq Clone() {
    return new PvpUnlockReq(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PvpUnlockReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PvpUnlockReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PvpUnlockReq other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

public sealed partial class PvpUnlockResp : pb::IMessage<PvpUnlockResp> {
  private static readonly pb::MessageParser<PvpUnlockResp> _parser = new pb::MessageParser<PvpUnlockResp>(() => new PvpUnlockResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PvpUnlockResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PvpReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpUnlockResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpUnlockResp(PvpUnlockResp other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpUnlockResp Clone() {
    return new PvpUnlockResp(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PvpUnlockResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PvpUnlockResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PvpUnlockResp other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

/// <summary>
///排行榜信息
/// </summary>
public sealed partial class PvpRankReq : pb::IMessage<PvpRankReq> {
  private static readonly pb::MessageParser<PvpRankReq> _parser = new pb::MessageParser<PvpRankReq>(() => new PvpRankReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PvpRankReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PvpReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpRankReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpRankReq(PvpRankReq other) : this() {
    page_ = other.page_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpRankReq Clone() {
    return new PvpRankReq(this);
  }

  /// <summary>Field number for the "page" field.</summary>
  public const int PageFieldNumber = 1;
  private int page_;
  /// <summary>
  ///分页页数，从0开始，每次加1	
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Page {
    get { return page_; }
    set {
      page_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PvpRankReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PvpRankReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Page != other.Page) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Page != 0) hash ^= Page.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Page != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Page);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Page != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Page);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PvpRankReq other) {
    if (other == null) {
      return;
    }
    if (other.Page != 0) {
      Page = other.Page;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Page = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PvpRankResp : pb::IMessage<PvpRankResp> {
  private static readonly pb::MessageParser<PvpRankResp> _parser = new pb::MessageParser<PvpRankResp>(() => new PvpRankResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PvpRankResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PvpReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpRankResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpRankResp(PvpRankResp other) : this() {
    rank_ = other.rank_.Clone();
    Self = other.self_ != null ? other.Self.Clone() : null;
    selfRank_ = other.selfRank_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpRankResp Clone() {
    return new PvpRankResp(this);
  }

  /// <summary>Field number for the "rank" field.</summary>
  public const int RankFieldNumber = 1;
  private static readonly pb::FieldCodec<global::PersonRankPb> _repeated_rank_codec
      = pb::FieldCodec.ForMessage(10, global::PersonRankPb.Parser);
  private readonly pbc::RepeatedField<global::PersonRankPb> rank_ = new pbc::RepeatedField<global::PersonRankPb>();
  /// <summary>
  ///整个排行榜信息，分页发送
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PersonRankPb> Rank {
    get { return rank_; }
  }

  /// <summary>Field number for the "self" field.</summary>
  public const int SelfFieldNumber = 2;
  private global::PersonRankPb self_;
  /// <summary>
  ///个人排行信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PersonRankPb Self {
    get { return self_; }
    set {
      self_ = value;
    }
  }

  /// <summary>Field number for the "self_rank" field.</summary>
  public const int SelfRankFieldNumber = 3;
  private int selfRank_;
  /// <summary>
  ///个人排名
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SelfRank {
    get { return selfRank_; }
    set {
      selfRank_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PvpRankResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PvpRankResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!rank_.Equals(other.rank_)) return false;
    if (!object.Equals(Self, other.Self)) return false;
    if (SelfRank != other.SelfRank) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= rank_.GetHashCode();
    if (self_ != null) hash ^= Self.GetHashCode();
    if (SelfRank != 0) hash ^= SelfRank.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    rank_.WriteTo(output, _repeated_rank_codec);
    if (self_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Self);
    }
    if (SelfRank != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(SelfRank);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += rank_.CalculateSize(_repeated_rank_codec);
    if (self_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Self);
    }
    if (SelfRank != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SelfRank);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PvpRankResp other) {
    if (other == null) {
      return;
    }
    rank_.Add(other.rank_);
    if (other.self_ != null) {
      if (self_ == null) {
        self_ = new global::PersonRankPb();
      }
      Self.MergeFrom(other.Self);
    }
    if (other.SelfRank != 0) {
      SelfRank = other.SelfRank;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          rank_.AddEntriesFrom(input, _repeated_rank_codec);
          break;
        }
        case 18: {
          if (self_ == null) {
            self_ = new global::PersonRankPb();
          }
          input.ReadMessage(self_);
          break;
        }
        case 24: {
          SelfRank = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///获取挑战列表
/// </summary>
public sealed partial class PvpListReq : pb::IMessage<PvpListReq> {
  private static readonly pb::MessageParser<PvpListReq> _parser = new pb::MessageParser<PvpListReq>(() => new PvpListReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PvpListReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PvpReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpListReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpListReq(PvpListReq other) : this() {
    param_ = other.param_;
    autoRefreshTime_ = other.autoRefreshTime_;
    manualRefreshTime_ = other.manualRefreshTime_;
    changeItem_ = other.changeItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpListReq Clone() {
    return new PvpListReq(this);
  }

  /// <summary>Field number for the "param" field.</summary>
  public const int ParamFieldNumber = 1;
  private int param_;
  /// <summary>
  ///0不刷新只获取，1自动刷新，2手动刷新
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Param {
    get { return param_; }
    set {
      param_ = value;
    }
  }

  /// <summary>Field number for the "autoRefreshTime" field.</summary>
  public const int AutoRefreshTimeFieldNumber = 2;
  private string autoRefreshTime_ = "";
  /// <summary>
  ///自动刷新时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AutoRefreshTime {
    get { return autoRefreshTime_; }
    set {
      autoRefreshTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "manualRefreshTime" field.</summary>
  public const int ManualRefreshTimeFieldNumber = 3;
  private string manualRefreshTime_ = "";
  /// <summary>
  ///手动刷新时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ManualRefreshTime {
    get { return manualRefreshTime_; }
    set {
      manualRefreshTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 4;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 34);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///改变的道具，客户端维护道具
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PvpListReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PvpListReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Param != other.Param) return false;
    if (AutoRefreshTime != other.AutoRefreshTime) return false;
    if (ManualRefreshTime != other.ManualRefreshTime) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Param != 0) hash ^= Param.GetHashCode();
    if (AutoRefreshTime.Length != 0) hash ^= AutoRefreshTime.GetHashCode();
    if (ManualRefreshTime.Length != 0) hash ^= ManualRefreshTime.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Param != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Param);
    }
    if (AutoRefreshTime.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(AutoRefreshTime);
    }
    if (ManualRefreshTime.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(ManualRefreshTime);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Param != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Param);
    }
    if (AutoRefreshTime.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AutoRefreshTime);
    }
    if (ManualRefreshTime.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ManualRefreshTime);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PvpListReq other) {
    if (other == null) {
      return;
    }
    if (other.Param != 0) {
      Param = other.Param;
    }
    if (other.AutoRefreshTime.Length != 0) {
      AutoRefreshTime = other.AutoRefreshTime;
    }
    if (other.ManualRefreshTime.Length != 0) {
      ManualRefreshTime = other.ManualRefreshTime;
    }
    changeItem_.Add(other.changeItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Param = input.ReadInt32();
          break;
        }
        case 18: {
          AutoRefreshTime = input.ReadString();
          break;
        }
        case 26: {
          ManualRefreshTime = input.ReadString();
          break;
        }
        case 34: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PvpListResp : pb::IMessage<PvpListResp> {
  private static readonly pb::MessageParser<PvpListResp> _parser = new pb::MessageParser<PvpListResp>(() => new PvpListResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PvpListResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PvpReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpListResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpListResp(PvpListResp other) : this() {
    pvpEnemy_ = other.pvpEnemy_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpListResp Clone() {
    return new PvpListResp(this);
  }

  /// <summary>Field number for the "pvpEnemy" field.</summary>
  public const int PvpEnemyFieldNumber = 1;
  private static readonly pb::FieldCodec<global::PersonRankPb> _repeated_pvpEnemy_codec
      = pb::FieldCodec.ForMessage(10, global::PersonRankPb.Parser);
  private readonly pbc::RepeatedField<global::PersonRankPb> pvpEnemy_ = new pbc::RepeatedField<global::PersonRankPb>();
  /// <summary>
  ///挑战玩家列表
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PersonRankPb> PvpEnemy {
    get { return pvpEnemy_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PvpListResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PvpListResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!pvpEnemy_.Equals(other.pvpEnemy_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= pvpEnemy_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pvpEnemy_.WriteTo(output, _repeated_pvpEnemy_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += pvpEnemy_.CalculateSize(_repeated_pvpEnemy_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PvpListResp other) {
    if (other == null) {
      return;
    }
    pvpEnemy_.Add(other.pvpEnemy_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          pvpEnemy_.AddEntriesFrom(input, _repeated_pvpEnemy_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///Pvp挑战
/// </summary>
public sealed partial class PvpReq : pb::IMessage<PvpReq> {
  private static readonly pb::MessageParser<PvpReq> _parser = new pb::MessageParser<PvpReq>(() => new PvpReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PvpReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PvpReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpReq(PvpReq other) : this() {
    enemyPid_ = other.enemyPid_;
    pvpTimes_ = other.pvpTimes_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpReq Clone() {
    return new PvpReq(this);
  }

  /// <summary>Field number for the "enemyPid" field.</summary>
  public const int EnemyPidFieldNumber = 1;
  private int enemyPid_;
  /// <summary>
  ///挑战的pid
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int EnemyPid {
    get { return enemyPid_; }
    set {
      enemyPid_ = value;
    }
  }

  /// <summary>Field number for the "pvpTimes" field.</summary>
  public const int PvpTimesFieldNumber = 2;
  private int pvpTimes_;
  /// <summary>
  ///变化后的挑战次数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PvpTimes {
    get { return pvpTimes_; }
    set {
      pvpTimes_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PvpReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PvpReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (EnemyPid != other.EnemyPid) return false;
    if (PvpTimes != other.PvpTimes) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (EnemyPid != 0) hash ^= EnemyPid.GetHashCode();
    if (PvpTimes != 0) hash ^= PvpTimes.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (EnemyPid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(EnemyPid);
    }
    if (PvpTimes != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(PvpTimes);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (EnemyPid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(EnemyPid);
    }
    if (PvpTimes != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PvpTimes);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PvpReq other) {
    if (other == null) {
      return;
    }
    if (other.EnemyPid != 0) {
      EnemyPid = other.EnemyPid;
    }
    if (other.PvpTimes != 0) {
      PvpTimes = other.PvpTimes;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          EnemyPid = input.ReadInt32();
          break;
        }
        case 16: {
          PvpTimes = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PvpResp : pb::IMessage<PvpResp> {
  private static readonly pb::MessageParser<PvpResp> _parser = new pb::MessageParser<PvpResp>(() => new PvpResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PvpResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PvpReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpResp(PvpResp other) : this() {
    Enemy = other.enemy_ != null ? other.Enemy.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpResp Clone() {
    return new PvpResp(this);
  }

  /// <summary>Field number for the "enemy" field.</summary>
  public const int EnemyFieldNumber = 1;
  private global::PvpEnemyPb enemy_;
  /// <summary>
  ///敌方数据
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PvpEnemyPb Enemy {
    get { return enemy_; }
    set {
      enemy_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PvpResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PvpResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Enemy, other.Enemy)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (enemy_ != null) hash ^= Enemy.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (enemy_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Enemy);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (enemy_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Enemy);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PvpResp other) {
    if (other == null) {
      return;
    }
    if (other.enemy_ != null) {
      if (enemy_ == null) {
        enemy_ = new global::PvpEnemyPb();
      }
      Enemy.MergeFrom(other.Enemy);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (enemy_ == null) {
            enemy_ = new global::PvpEnemyPb();
          }
          input.ReadMessage(enemy_);
          break;
        }
      }
    }
  }

}

/// <summary>
///Pvp结算
/// </summary>
public sealed partial class PvpFinshReq : pb::IMessage<PvpFinshReq> {
  private static readonly pb::MessageParser<PvpFinshReq> _parser = new pb::MessageParser<PvpFinshReq>(() => new PvpFinshReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PvpFinshReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PvpReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpFinshReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpFinshReq(PvpFinshReq other) : this() {
    enemyPid_ = other.enemyPid_;
    result_ = other.result_;
    firstSucceed_ = other.firstSucceed_;
    changeItem_ = other.changeItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpFinshReq Clone() {
    return new PvpFinshReq(this);
  }

  /// <summary>Field number for the "enemyPid" field.</summary>
  public const int EnemyPidFieldNumber = 1;
  private int enemyPid_;
  /// <summary>
  ///挑战的敌方id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int EnemyPid {
    get { return enemyPid_; }
    set {
      enemyPid_ = value;
    }
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 2;
  private int result_;
  /// <summary>
  ///1-胜利 0-失败
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "firstSucceed" field.</summary>
  public const int FirstSucceedFieldNumber = 3;
  private int firstSucceed_;
  /// <summary>
  ///首次挑战是否胜利
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FirstSucceed {
    get { return firstSucceed_; }
    set {
      firstSucceed_ = value;
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 4;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 34);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///改变的道具，客户端维护道具
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PvpFinshReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PvpFinshReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (EnemyPid != other.EnemyPid) return false;
    if (Result != other.Result) return false;
    if (FirstSucceed != other.FirstSucceed) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (EnemyPid != 0) hash ^= EnemyPid.GetHashCode();
    if (Result != 0) hash ^= Result.GetHashCode();
    if (FirstSucceed != 0) hash ^= FirstSucceed.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (EnemyPid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(EnemyPid);
    }
    if (Result != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Result);
    }
    if (FirstSucceed != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(FirstSucceed);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (EnemyPid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(EnemyPid);
    }
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (FirstSucceed != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FirstSucceed);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PvpFinshReq other) {
    if (other == null) {
      return;
    }
    if (other.EnemyPid != 0) {
      EnemyPid = other.EnemyPid;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.FirstSucceed != 0) {
      FirstSucceed = other.FirstSucceed;
    }
    changeItem_.Add(other.changeItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          EnemyPid = input.ReadInt32();
          break;
        }
        case 16: {
          Result = input.ReadInt32();
          break;
        }
        case 24: {
          FirstSucceed = input.ReadInt32();
          break;
        }
        case 34: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PvpFinshResp : pb::IMessage<PvpFinshResp> {
  private static readonly pb::MessageParser<PvpFinshResp> _parser = new pb::MessageParser<PvpFinshResp>(() => new PvpFinshResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PvpFinshResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PvpReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpFinshResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpFinshResp(PvpFinshResp other) : this() {
    integral_ = other.integral_;
    rank_ = other.rank_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpFinshResp Clone() {
    return new PvpFinshResp(this);
  }

  /// <summary>Field number for the "integral" field.</summary>
  public const int IntegralFieldNumber = 1;
  private int integral_;
  /// <summary>
  ///个人积分
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Integral {
    get { return integral_; }
    set {
      integral_ = value;
    }
  }

  /// <summary>Field number for the "rank" field.</summary>
  public const int RankFieldNumber = 2;
  private int rank_;
  /// <summary>
  ///个人排名
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Rank {
    get { return rank_; }
    set {
      rank_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PvpFinshResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PvpFinshResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Integral != other.Integral) return false;
    if (Rank != other.Rank) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Integral != 0) hash ^= Integral.GetHashCode();
    if (Rank != 0) hash ^= Rank.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Integral != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Integral);
    }
    if (Rank != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Rank);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Integral != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Integral);
    }
    if (Rank != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PvpFinshResp other) {
    if (other == null) {
      return;
    }
    if (other.Integral != 0) {
      Integral = other.Integral;
    }
    if (other.Rank != 0) {
      Rank = other.Rank;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Integral = input.ReadInt32();
          break;
        }
        case 16: {
          Rank = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///每日奖励
/// </summary>
public sealed partial class PvpDailyRewardReq : pb::IMessage<PvpDailyRewardReq> {
  private static readonly pb::MessageParser<PvpDailyRewardReq> _parser = new pb::MessageParser<PvpDailyRewardReq>(() => new PvpDailyRewardReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PvpDailyRewardReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PvpReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpDailyRewardReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpDailyRewardReq(PvpDailyRewardReq other) : this() {
    getDayReward_ = other.getDayReward_;
    changeItem_ = other.changeItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpDailyRewardReq Clone() {
    return new PvpDailyRewardReq(this);
  }

  /// <summary>Field number for the "getDayReward" field.</summary>
  public const int GetDayRewardFieldNumber = 1;
  private bool getDayReward_;
  /// <summary>
  ///每日奖励是否已经领取
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool GetDayReward {
    get { return getDayReward_; }
    set {
      getDayReward_ = value;
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///改变的道具，客户端维护道具
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PvpDailyRewardReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PvpDailyRewardReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (GetDayReward != other.GetDayReward) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (GetDayReward != false) hash ^= GetDayReward.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (GetDayReward != false) {
      output.WriteRawTag(8);
      output.WriteBool(GetDayReward);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (GetDayReward != false) {
      size += 1 + 1;
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PvpDailyRewardReq other) {
    if (other == null) {
      return;
    }
    if (other.GetDayReward != false) {
      GetDayReward = other.GetDayReward;
    }
    changeItem_.Add(other.changeItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          GetDayReward = input.ReadBool();
          break;
        }
        case 18: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PvpDailyRewardResp : pb::IMessage<PvpDailyRewardResp> {
  private static readonly pb::MessageParser<PvpDailyRewardResp> _parser = new pb::MessageParser<PvpDailyRewardResp>(() => new PvpDailyRewardResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PvpDailyRewardResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PvpReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpDailyRewardResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpDailyRewardResp(PvpDailyRewardResp other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpDailyRewardResp Clone() {
    return new PvpDailyRewardResp(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PvpDailyRewardResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PvpDailyRewardResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PvpDailyRewardResp other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

/// <summary>
///添加挑战次数
/// </summary>
public sealed partial class PvpAddTimesReq : pb::IMessage<PvpAddTimesReq> {
  private static readonly pb::MessageParser<PvpAddTimesReq> _parser = new pb::MessageParser<PvpAddTimesReq>(() => new PvpAddTimesReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PvpAddTimesReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PvpReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpAddTimesReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpAddTimesReq(PvpAddTimesReq other) : this() {
    pvpTimes_ = other.pvpTimes_;
    changeItem_ = other.changeItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpAddTimesReq Clone() {
    return new PvpAddTimesReq(this);
  }

  /// <summary>Field number for the "pvpTimes" field.</summary>
  public const int PvpTimesFieldNumber = 1;
  private int pvpTimes_;
  /// <summary>
  ///变化后的挑战次数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PvpTimes {
    get { return pvpTimes_; }
    set {
      pvpTimes_ = value;
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///改变的道具，客户端维护道具
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PvpAddTimesReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PvpAddTimesReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PvpTimes != other.PvpTimes) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PvpTimes != 0) hash ^= PvpTimes.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PvpTimes != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(PvpTimes);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PvpTimes != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PvpTimes);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PvpAddTimesReq other) {
    if (other == null) {
      return;
    }
    if (other.PvpTimes != 0) {
      PvpTimes = other.PvpTimes;
    }
    changeItem_.Add(other.changeItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          PvpTimes = input.ReadInt32();
          break;
        }
        case 18: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PvpAddTimesResp : pb::IMessage<PvpAddTimesResp> {
  private static readonly pb::MessageParser<PvpAddTimesResp> _parser = new pb::MessageParser<PvpAddTimesResp>(() => new PvpAddTimesResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PvpAddTimesResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PvpReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpAddTimesResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpAddTimesResp(PvpAddTimesResp other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpAddTimesResp Clone() {
    return new PvpAddTimesResp(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PvpAddTimesResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PvpAddTimesResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PvpAddTimesResp other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

#endregion


#endregion Designer generated code
