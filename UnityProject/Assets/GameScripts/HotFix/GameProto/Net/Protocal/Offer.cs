// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: offer.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from offer.proto</summary>
public static partial class OfferReflection {

  #region Descriptor
  /// <summary>File descriptor for offer.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static OfferReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgtvZmZlci5wcm90byLPAQoRQWxsT2ZmZXJSZXdhcmRSZXESGAoQb2ZmZXJS",
          "ZXdhcmRDb3VudBgBIAEoCRIXCg9vZmZlclJld2FyZFRhc2sYAiABKAkSHAoU",
          "b2ZmZXJSZXdhcmRUYXNrTGV2ZWwYAyABKAUSNgoKY2hhbmdlSXRlbRgEIAMo",
          "CzIiLkFsbE9mZmVyUmV3YXJkUmVxLkNoYW5nZUl0ZW1FbnRyeRoxCg9DaGFu",
          "Z2VJdGVtRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4ASIU",
          "ChJBbGxPZmZlclJld2FyZFJlc3AiyQEKDk9mZmVyUmV3YXJkUmVxEhgKEG9m",
          "ZmVyUmV3YXJkQ291bnQYASABKAkSFwoPb2ZmZXJSZXdhcmRUYXNrGAIgASgJ",
          "EhwKFG9mZmVyUmV3YXJkVGFza0xldmVsGAMgASgFEjMKCmNoYW5nZUl0ZW0Y",
          "BCADKAsyHy5PZmZlclJld2FyZFJlcS5DaGFuZ2VJdGVtRW50cnkaMQoPQ2hh",
          "bmdlSXRlbUVudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoBToCOAEi",
          "EQoPT2ZmZXJSZXdhcmRSZXNwImYKE09mZmVyRGlzcGF0Y2hBbGxSZXESGAoQ",
          "b2ZmZXJSZXdhcmRDb3VudBgBIAEoCRIXCg9vZmZlclJld2FyZFRhc2sYAiAB",
          "KAkSHAoUb2ZmZXJSZXdhcmRUYXNrTGV2ZWwYAyABKAUiEQoPRGlzcGF0Y2hB",
          "bGxSZXNwImMKEE9mZmVyRGlzcGF0Y2hSZXESGAoQb2ZmZXJSZXdhcmRDb3Vu",
          "dBgBIAEoCRIXCg9vZmZlclJld2FyZFRhc2sYAiABKAkSHAoUb2ZmZXJSZXdh",
          "cmRUYXNrTGV2ZWwYAyABKAUiEwoRT2ZmZXJEaXNwYXRjaFJlc3Ai7AEKE09m",
          "ZmVyUmVmcmVzaFRhc2tSZXESGAoQb2ZmZXJSZXdhcmRDb3VudBgBIAEoCRIX",
          "Cg9vZmZlclJld2FyZFRhc2sYAiABKAkSHAoUb2ZmZXJSZXdhcmRUYXNrTGV2",
          "ZWwYAyABKAUSFwoPb2ZmZXJSZXdhcmRUaW1lGAQgASgJEjgKCmNoYW5nZUl0",
          "ZW0YBSADKAsyJC5PZmZlclJlZnJlc2hUYXNrUmVxLkNoYW5nZUl0ZW1FbnRy",
          "eRoxCg9DaGFuZ2VJdGVtRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIg",
          "ASgFOgI4ASIWChRPZmZlclJlZnJlc2hUYXNrUmVzcEIVCgpjb20uY2IubXNn",
          "QgdQQk9mZmVyYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::AllOfferRewardReq), global::AllOfferRewardReq.Parser, new[]{ "OfferRewardCount", "OfferRewardTask", "OfferRewardTaskLevel", "ChangeItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::AllOfferRewardResp), global::AllOfferRewardResp.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::OfferRewardReq), global::OfferRewardReq.Parser, new[]{ "OfferRewardCount", "OfferRewardTask", "OfferRewardTaskLevel", "ChangeItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::OfferRewardResp), global::OfferRewardResp.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::OfferDispatchAllReq), global::OfferDispatchAllReq.Parser, new[]{ "OfferRewardCount", "OfferRewardTask", "OfferRewardTaskLevel" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DispatchAllResp), global::DispatchAllResp.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::OfferDispatchReq), global::OfferDispatchReq.Parser, new[]{ "OfferRewardCount", "OfferRewardTask", "OfferRewardTaskLevel" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::OfferDispatchResp), global::OfferDispatchResp.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::OfferRefreshTaskReq), global::OfferRefreshTaskReq.Parser, new[]{ "OfferRewardCount", "OfferRewardTask", "OfferRewardTaskLevel", "OfferRewardTime", "ChangeItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::OfferRefreshTaskResp), global::OfferRefreshTaskResp.Parser, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
///获取所有奖励
/// </summary>
public sealed partial class AllOfferRewardReq : pb::IMessage<AllOfferRewardReq> {
  private static readonly pb::MessageParser<AllOfferRewardReq> _parser = new pb::MessageParser<AllOfferRewardReq>(() => new AllOfferRewardReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AllOfferRewardReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OfferReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AllOfferRewardReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AllOfferRewardReq(AllOfferRewardReq other) : this() {
    offerRewardCount_ = other.offerRewardCount_;
    offerRewardTask_ = other.offerRewardTask_;
    offerRewardTaskLevel_ = other.offerRewardTaskLevel_;
    changeItem_ = other.changeItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AllOfferRewardReq Clone() {
    return new AllOfferRewardReq(this);
  }

  /// <summary>Field number for the "offerRewardCount" field.</summary>
  public const int OfferRewardCountFieldNumber = 1;
  private string offerRewardCount_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string OfferRewardCount {
    get { return offerRewardCount_; }
    set {
      offerRewardCount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "offerRewardTask" field.</summary>
  public const int OfferRewardTaskFieldNumber = 2;
  private string offerRewardTask_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string OfferRewardTask {
    get { return offerRewardTask_; }
    set {
      offerRewardTask_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "offerRewardTaskLevel" field.</summary>
  public const int OfferRewardTaskLevelFieldNumber = 3;
  private int offerRewardTaskLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OfferRewardTaskLevel {
    get { return offerRewardTaskLevel_; }
    set {
      offerRewardTaskLevel_ = value;
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 4;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 34);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///改变的道具，客户端维护道具
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AllOfferRewardReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AllOfferRewardReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (OfferRewardCount != other.OfferRewardCount) return false;
    if (OfferRewardTask != other.OfferRewardTask) return false;
    if (OfferRewardTaskLevel != other.OfferRewardTaskLevel) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (OfferRewardCount.Length != 0) hash ^= OfferRewardCount.GetHashCode();
    if (OfferRewardTask.Length != 0) hash ^= OfferRewardTask.GetHashCode();
    if (OfferRewardTaskLevel != 0) hash ^= OfferRewardTaskLevel.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (OfferRewardCount.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(OfferRewardCount);
    }
    if (OfferRewardTask.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(OfferRewardTask);
    }
    if (OfferRewardTaskLevel != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(OfferRewardTaskLevel);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (OfferRewardCount.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(OfferRewardCount);
    }
    if (OfferRewardTask.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(OfferRewardTask);
    }
    if (OfferRewardTaskLevel != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OfferRewardTaskLevel);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AllOfferRewardReq other) {
    if (other == null) {
      return;
    }
    if (other.OfferRewardCount.Length != 0) {
      OfferRewardCount = other.OfferRewardCount;
    }
    if (other.OfferRewardTask.Length != 0) {
      OfferRewardTask = other.OfferRewardTask;
    }
    if (other.OfferRewardTaskLevel != 0) {
      OfferRewardTaskLevel = other.OfferRewardTaskLevel;
    }
    changeItem_.Add(other.changeItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          OfferRewardCount = input.ReadString();
          break;
        }
        case 18: {
          OfferRewardTask = input.ReadString();
          break;
        }
        case 24: {
          OfferRewardTaskLevel = input.ReadInt32();
          break;
        }
        case 34: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class AllOfferRewardResp : pb::IMessage<AllOfferRewardResp> {
  private static readonly pb::MessageParser<AllOfferRewardResp> _parser = new pb::MessageParser<AllOfferRewardResp>(() => new AllOfferRewardResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AllOfferRewardResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OfferReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AllOfferRewardResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AllOfferRewardResp(AllOfferRewardResp other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AllOfferRewardResp Clone() {
    return new AllOfferRewardResp(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AllOfferRewardResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AllOfferRewardResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AllOfferRewardResp other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

/// <summary>
///获取单个奖励
/// </summary>
public sealed partial class OfferRewardReq : pb::IMessage<OfferRewardReq> {
  private static readonly pb::MessageParser<OfferRewardReq> _parser = new pb::MessageParser<OfferRewardReq>(() => new OfferRewardReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<OfferRewardReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OfferReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferRewardReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferRewardReq(OfferRewardReq other) : this() {
    offerRewardCount_ = other.offerRewardCount_;
    offerRewardTask_ = other.offerRewardTask_;
    offerRewardTaskLevel_ = other.offerRewardTaskLevel_;
    changeItem_ = other.changeItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferRewardReq Clone() {
    return new OfferRewardReq(this);
  }

  /// <summary>Field number for the "offerRewardCount" field.</summary>
  public const int OfferRewardCountFieldNumber = 1;
  private string offerRewardCount_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string OfferRewardCount {
    get { return offerRewardCount_; }
    set {
      offerRewardCount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "offerRewardTask" field.</summary>
  public const int OfferRewardTaskFieldNumber = 2;
  private string offerRewardTask_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string OfferRewardTask {
    get { return offerRewardTask_; }
    set {
      offerRewardTask_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "offerRewardTaskLevel" field.</summary>
  public const int OfferRewardTaskLevelFieldNumber = 3;
  private int offerRewardTaskLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OfferRewardTaskLevel {
    get { return offerRewardTaskLevel_; }
    set {
      offerRewardTaskLevel_ = value;
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 4;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 34);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///改变的道具，客户端维护道具
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as OfferRewardReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(OfferRewardReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (OfferRewardCount != other.OfferRewardCount) return false;
    if (OfferRewardTask != other.OfferRewardTask) return false;
    if (OfferRewardTaskLevel != other.OfferRewardTaskLevel) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (OfferRewardCount.Length != 0) hash ^= OfferRewardCount.GetHashCode();
    if (OfferRewardTask.Length != 0) hash ^= OfferRewardTask.GetHashCode();
    if (OfferRewardTaskLevel != 0) hash ^= OfferRewardTaskLevel.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (OfferRewardCount.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(OfferRewardCount);
    }
    if (OfferRewardTask.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(OfferRewardTask);
    }
    if (OfferRewardTaskLevel != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(OfferRewardTaskLevel);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (OfferRewardCount.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(OfferRewardCount);
    }
    if (OfferRewardTask.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(OfferRewardTask);
    }
    if (OfferRewardTaskLevel != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OfferRewardTaskLevel);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(OfferRewardReq other) {
    if (other == null) {
      return;
    }
    if (other.OfferRewardCount.Length != 0) {
      OfferRewardCount = other.OfferRewardCount;
    }
    if (other.OfferRewardTask.Length != 0) {
      OfferRewardTask = other.OfferRewardTask;
    }
    if (other.OfferRewardTaskLevel != 0) {
      OfferRewardTaskLevel = other.OfferRewardTaskLevel;
    }
    changeItem_.Add(other.changeItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          OfferRewardCount = input.ReadString();
          break;
        }
        case 18: {
          OfferRewardTask = input.ReadString();
          break;
        }
        case 24: {
          OfferRewardTaskLevel = input.ReadInt32();
          break;
        }
        case 34: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class OfferRewardResp : pb::IMessage<OfferRewardResp> {
  private static readonly pb::MessageParser<OfferRewardResp> _parser = new pb::MessageParser<OfferRewardResp>(() => new OfferRewardResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<OfferRewardResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OfferReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferRewardResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferRewardResp(OfferRewardResp other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferRewardResp Clone() {
    return new OfferRewardResp(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as OfferRewardResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(OfferRewardResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(OfferRewardResp other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

/// <summary>
///一键派遣
/// </summary>
public sealed partial class OfferDispatchAllReq : pb::IMessage<OfferDispatchAllReq> {
  private static readonly pb::MessageParser<OfferDispatchAllReq> _parser = new pb::MessageParser<OfferDispatchAllReq>(() => new OfferDispatchAllReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<OfferDispatchAllReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OfferReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferDispatchAllReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferDispatchAllReq(OfferDispatchAllReq other) : this() {
    offerRewardCount_ = other.offerRewardCount_;
    offerRewardTask_ = other.offerRewardTask_;
    offerRewardTaskLevel_ = other.offerRewardTaskLevel_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferDispatchAllReq Clone() {
    return new OfferDispatchAllReq(this);
  }

  /// <summary>Field number for the "offerRewardCount" field.</summary>
  public const int OfferRewardCountFieldNumber = 1;
  private string offerRewardCount_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string OfferRewardCount {
    get { return offerRewardCount_; }
    set {
      offerRewardCount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "offerRewardTask" field.</summary>
  public const int OfferRewardTaskFieldNumber = 2;
  private string offerRewardTask_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string OfferRewardTask {
    get { return offerRewardTask_; }
    set {
      offerRewardTask_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "offerRewardTaskLevel" field.</summary>
  public const int OfferRewardTaskLevelFieldNumber = 3;
  private int offerRewardTaskLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OfferRewardTaskLevel {
    get { return offerRewardTaskLevel_; }
    set {
      offerRewardTaskLevel_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as OfferDispatchAllReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(OfferDispatchAllReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (OfferRewardCount != other.OfferRewardCount) return false;
    if (OfferRewardTask != other.OfferRewardTask) return false;
    if (OfferRewardTaskLevel != other.OfferRewardTaskLevel) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (OfferRewardCount.Length != 0) hash ^= OfferRewardCount.GetHashCode();
    if (OfferRewardTask.Length != 0) hash ^= OfferRewardTask.GetHashCode();
    if (OfferRewardTaskLevel != 0) hash ^= OfferRewardTaskLevel.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (OfferRewardCount.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(OfferRewardCount);
    }
    if (OfferRewardTask.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(OfferRewardTask);
    }
    if (OfferRewardTaskLevel != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(OfferRewardTaskLevel);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (OfferRewardCount.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(OfferRewardCount);
    }
    if (OfferRewardTask.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(OfferRewardTask);
    }
    if (OfferRewardTaskLevel != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OfferRewardTaskLevel);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(OfferDispatchAllReq other) {
    if (other == null) {
      return;
    }
    if (other.OfferRewardCount.Length != 0) {
      OfferRewardCount = other.OfferRewardCount;
    }
    if (other.OfferRewardTask.Length != 0) {
      OfferRewardTask = other.OfferRewardTask;
    }
    if (other.OfferRewardTaskLevel != 0) {
      OfferRewardTaskLevel = other.OfferRewardTaskLevel;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          OfferRewardCount = input.ReadString();
          break;
        }
        case 18: {
          OfferRewardTask = input.ReadString();
          break;
        }
        case 24: {
          OfferRewardTaskLevel = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DispatchAllResp : pb::IMessage<DispatchAllResp> {
  private static readonly pb::MessageParser<DispatchAllResp> _parser = new pb::MessageParser<DispatchAllResp>(() => new DispatchAllResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DispatchAllResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OfferReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DispatchAllResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DispatchAllResp(DispatchAllResp other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DispatchAllResp Clone() {
    return new DispatchAllResp(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DispatchAllResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DispatchAllResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DispatchAllResp other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

/// <summary>
///派遣某个任务
/// </summary>
public sealed partial class OfferDispatchReq : pb::IMessage<OfferDispatchReq> {
  private static readonly pb::MessageParser<OfferDispatchReq> _parser = new pb::MessageParser<OfferDispatchReq>(() => new OfferDispatchReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<OfferDispatchReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OfferReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferDispatchReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferDispatchReq(OfferDispatchReq other) : this() {
    offerRewardCount_ = other.offerRewardCount_;
    offerRewardTask_ = other.offerRewardTask_;
    offerRewardTaskLevel_ = other.offerRewardTaskLevel_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferDispatchReq Clone() {
    return new OfferDispatchReq(this);
  }

  /// <summary>Field number for the "offerRewardCount" field.</summary>
  public const int OfferRewardCountFieldNumber = 1;
  private string offerRewardCount_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string OfferRewardCount {
    get { return offerRewardCount_; }
    set {
      offerRewardCount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "offerRewardTask" field.</summary>
  public const int OfferRewardTaskFieldNumber = 2;
  private string offerRewardTask_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string OfferRewardTask {
    get { return offerRewardTask_; }
    set {
      offerRewardTask_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "offerRewardTaskLevel" field.</summary>
  public const int OfferRewardTaskLevelFieldNumber = 3;
  private int offerRewardTaskLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OfferRewardTaskLevel {
    get { return offerRewardTaskLevel_; }
    set {
      offerRewardTaskLevel_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as OfferDispatchReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(OfferDispatchReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (OfferRewardCount != other.OfferRewardCount) return false;
    if (OfferRewardTask != other.OfferRewardTask) return false;
    if (OfferRewardTaskLevel != other.OfferRewardTaskLevel) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (OfferRewardCount.Length != 0) hash ^= OfferRewardCount.GetHashCode();
    if (OfferRewardTask.Length != 0) hash ^= OfferRewardTask.GetHashCode();
    if (OfferRewardTaskLevel != 0) hash ^= OfferRewardTaskLevel.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (OfferRewardCount.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(OfferRewardCount);
    }
    if (OfferRewardTask.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(OfferRewardTask);
    }
    if (OfferRewardTaskLevel != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(OfferRewardTaskLevel);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (OfferRewardCount.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(OfferRewardCount);
    }
    if (OfferRewardTask.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(OfferRewardTask);
    }
    if (OfferRewardTaskLevel != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OfferRewardTaskLevel);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(OfferDispatchReq other) {
    if (other == null) {
      return;
    }
    if (other.OfferRewardCount.Length != 0) {
      OfferRewardCount = other.OfferRewardCount;
    }
    if (other.OfferRewardTask.Length != 0) {
      OfferRewardTask = other.OfferRewardTask;
    }
    if (other.OfferRewardTaskLevel != 0) {
      OfferRewardTaskLevel = other.OfferRewardTaskLevel;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          OfferRewardCount = input.ReadString();
          break;
        }
        case 18: {
          OfferRewardTask = input.ReadString();
          break;
        }
        case 24: {
          OfferRewardTaskLevel = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class OfferDispatchResp : pb::IMessage<OfferDispatchResp> {
  private static readonly pb::MessageParser<OfferDispatchResp> _parser = new pb::MessageParser<OfferDispatchResp>(() => new OfferDispatchResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<OfferDispatchResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OfferReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferDispatchResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferDispatchResp(OfferDispatchResp other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferDispatchResp Clone() {
    return new OfferDispatchResp(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as OfferDispatchResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(OfferDispatchResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(OfferDispatchResp other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

/// <summary>
///刷新任务
/// </summary>
public sealed partial class OfferRefreshTaskReq : pb::IMessage<OfferRefreshTaskReq> {
  private static readonly pb::MessageParser<OfferRefreshTaskReq> _parser = new pb::MessageParser<OfferRefreshTaskReq>(() => new OfferRefreshTaskReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<OfferRefreshTaskReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OfferReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferRefreshTaskReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferRefreshTaskReq(OfferRefreshTaskReq other) : this() {
    offerRewardCount_ = other.offerRewardCount_;
    offerRewardTask_ = other.offerRewardTask_;
    offerRewardTaskLevel_ = other.offerRewardTaskLevel_;
    offerRewardTime_ = other.offerRewardTime_;
    changeItem_ = other.changeItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferRefreshTaskReq Clone() {
    return new OfferRefreshTaskReq(this);
  }

  /// <summary>Field number for the "offerRewardCount" field.</summary>
  public const int OfferRewardCountFieldNumber = 1;
  private string offerRewardCount_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string OfferRewardCount {
    get { return offerRewardCount_; }
    set {
      offerRewardCount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "offerRewardTask" field.</summary>
  public const int OfferRewardTaskFieldNumber = 2;
  private string offerRewardTask_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string OfferRewardTask {
    get { return offerRewardTask_; }
    set {
      offerRewardTask_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "offerRewardTaskLevel" field.</summary>
  public const int OfferRewardTaskLevelFieldNumber = 3;
  private int offerRewardTaskLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OfferRewardTaskLevel {
    get { return offerRewardTaskLevel_; }
    set {
      offerRewardTaskLevel_ = value;
    }
  }

  /// <summary>Field number for the "offerRewardTime" field.</summary>
  public const int OfferRewardTimeFieldNumber = 4;
  private string offerRewardTime_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string OfferRewardTime {
    get { return offerRewardTime_; }
    set {
      offerRewardTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 5;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 42);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///改变的道具，客户端维护道具
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as OfferRefreshTaskReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(OfferRefreshTaskReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (OfferRewardCount != other.OfferRewardCount) return false;
    if (OfferRewardTask != other.OfferRewardTask) return false;
    if (OfferRewardTaskLevel != other.OfferRewardTaskLevel) return false;
    if (OfferRewardTime != other.OfferRewardTime) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (OfferRewardCount.Length != 0) hash ^= OfferRewardCount.GetHashCode();
    if (OfferRewardTask.Length != 0) hash ^= OfferRewardTask.GetHashCode();
    if (OfferRewardTaskLevel != 0) hash ^= OfferRewardTaskLevel.GetHashCode();
    if (OfferRewardTime.Length != 0) hash ^= OfferRewardTime.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (OfferRewardCount.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(OfferRewardCount);
    }
    if (OfferRewardTask.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(OfferRewardTask);
    }
    if (OfferRewardTaskLevel != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(OfferRewardTaskLevel);
    }
    if (OfferRewardTime.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(OfferRewardTime);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (OfferRewardCount.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(OfferRewardCount);
    }
    if (OfferRewardTask.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(OfferRewardTask);
    }
    if (OfferRewardTaskLevel != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OfferRewardTaskLevel);
    }
    if (OfferRewardTime.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(OfferRewardTime);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(OfferRefreshTaskReq other) {
    if (other == null) {
      return;
    }
    if (other.OfferRewardCount.Length != 0) {
      OfferRewardCount = other.OfferRewardCount;
    }
    if (other.OfferRewardTask.Length != 0) {
      OfferRewardTask = other.OfferRewardTask;
    }
    if (other.OfferRewardTaskLevel != 0) {
      OfferRewardTaskLevel = other.OfferRewardTaskLevel;
    }
    if (other.OfferRewardTime.Length != 0) {
      OfferRewardTime = other.OfferRewardTime;
    }
    changeItem_.Add(other.changeItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          OfferRewardCount = input.ReadString();
          break;
        }
        case 18: {
          OfferRewardTask = input.ReadString();
          break;
        }
        case 24: {
          OfferRewardTaskLevel = input.ReadInt32();
          break;
        }
        case 34: {
          OfferRewardTime = input.ReadString();
          break;
        }
        case 42: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class OfferRefreshTaskResp : pb::IMessage<OfferRefreshTaskResp> {
  private static readonly pb::MessageParser<OfferRefreshTaskResp> _parser = new pb::MessageParser<OfferRefreshTaskResp>(() => new OfferRefreshTaskResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<OfferRefreshTaskResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OfferReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferRefreshTaskResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferRefreshTaskResp(OfferRefreshTaskResp other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferRefreshTaskResp Clone() {
    return new OfferRefreshTaskResp(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as OfferRefreshTaskResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(OfferRefreshTaskResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(OfferRefreshTaskResp other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

#endregion


#endregion Designer generated code
