// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from player.proto</summary>
public static partial class PlayerReflection {

  #region Descriptor
  /// <summary>File descriptor for player.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static PlayerReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgxwbGF5ZXIucHJvdG8aCmJlYW4ucHJvdG8iGAoIUGluZ1Jlc3ASDAoEdGlt",
          "ZRgBIAEoBSIbCghMb2dpblJlcRIPCgdhY2NvdW50GAEgASgJIjkKCUxvZ2lu",
          "UmVzcBIdCgpwbGF5ZXJEYXRhGAEgASgLMgkuUGxheWVyUGISDQoFc1RpbWUY",
          "ByABKAMiKAoHU3luY1JlcRIdCgpwbGF5ZXJEYXRhGAEgASgLMgkuUGxheWVy",
          "UGIiGwoIU3luY1Jlc3ASDwoHc3VjY2VzcxgBIAEoCCIXCgdSYW5rUmVxEgwK",
          "BHR5cGUYASABKAUiJQoIUmFua1Jlc3ASGQoIcmFua0RhdGEYASADKAsyBy5S",
          "YW5rUGIiHQoMU3luY1N0YWdlUmVxEg0KBXN0YWdlGAEgASgFIg8KDVN5bmNT",
          "dGFnZVJlc3AikwEKDUFkZERpYW1vbmRSZXESGwoTc2hvcEJ1eURpYW1vbmRG",
          "aXJzdBgBIAEoCRIyCgpjaGFuZ2VJdGVtGAIgAygLMh4uQWRkRGlhbW9uZFJl",
          "cS5DaGFuZ2VJdGVtRW50cnkaMQoPQ2hhbmdlSXRlbUVudHJ5EgsKA2tleRgB",
          "IAEoBRINCgV2YWx1ZRgCIAEoBToCOAEiEAoOQWRkRGlhbW9uZFJlc3AiigEK",
          "CkFkZEdvbGRSZXESGAoQc2hvcEJ1eUdvbGRGaXJzdBgBIAEoCRIvCgpjaGFu",
          "Z2VJdGVtGAIgAygLMhsuQWRkR29sZFJlcS5DaGFuZ2VJdGVtRW50cnkaMQoP",
          "Q2hhbmdlSXRlbUVudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoBToC",
          "OAEiDQoLQWRkR29sZFJlc3AicgoLU3luY0l0ZW1SZXESMAoKY2hhbmdlSXRl",
          "bRgBIAMoCzIcLlN5bmNJdGVtUmVxLkNoYW5nZUl0ZW1FbnRyeRoxCg9DaGFu",
          "Z2VJdGVtRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4ASIO",
          "CgxTeW5jSXRlbVJlc3AikwEKDk5vcm1hbEZpbnNoUmVxEhkKEWhhdmVFcXVp",
          "cG1lbnREYXRhGAEgASgJEjMKCmNoYW5nZUl0ZW0YAiADKAsyHy5Ob3JtYWxG",
          "aW5zaFJlcS5DaGFuZ2VJdGVtRW50cnkaMQoPQ2hhbmdlSXRlbUVudHJ5EgsK",
          "A2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoBToCOAEiEQoPTm9ybWFsRmluc2hS",
          "ZXNwItEBChFHb2xkQUJvc3NGaW5zaFJlcRIZChFoYXZlRXF1aXBtZW50RGF0",
          "YRgBIAEoCRIaChJnb2xkQ2hhbGxlbmdlZFRpbWUYAiABKAUSGgoSYm9zc0No",
          "YWxsZW5nZWRUaW1lGAMgASgFEjYKCmNoYW5nZUl0ZW0YBCADKAsyIi5Hb2xk",
          "QUJvc3NGaW5zaFJlcS5DaGFuZ2VJdGVtRW50cnkaMQoPQ2hhbmdlSXRlbUVu",
          "dHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoBToCOAEiFAoSR29sZEFC",
          "b3NzRmluc2hSZXNwIpYBChJDbGltYlRvd2VyRmluc2hSZXESFAoMZW5kbGVz",
          "c1Rvd2VyGAEgASgFEjcKCmNoYW5nZUl0ZW0YAiADKAsyIy5DbGltYlRvd2Vy",
          "Rmluc2hSZXEuQ2hhbmdlSXRlbUVudHJ5GjEKD0NoYW5nZUl0ZW1FbnRyeRIL",
          "CgNrZXkYASABKAUSDQoFdmFsdWUYAiABKAU6AjgBIhUKE0NsaW1iVG93ZXJG",
          "aW5zaFJlc3AimQEKElN1cnByaXNlZFJld2FyZFJlcRIXCg9zdXJwcmlzZUJv",
          "eFRpbWUYASABKAUSNwoKY2hhbmdlSXRlbRgCIAMoCzIjLlN1cnByaXNlZFJl",
          "d2FyZFJlcS5DaGFuZ2VJdGVtRW50cnkaMQoPQ2hhbmdlSXRlbUVudHJ5EgsK",
          "A2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoBToCOAEiFQoTU3VycHJpc2VkUmV3",
          "YXJkUmVzcCKAAgoPQnV5TW9udGhDYXJkUmVxEhkKEWJ1bGVNb250aENhcmRU",
          "aW1lGAEgASgJEhsKE3B1cnBsZU1vbnRoQ2FyZFRpbWUYAiABKAkSJAocYnVs",
          "ZU1vbnRoQ2FyZERhaWx5UmV3YXJkVGltZRgDIAEoBRImCh5wdXJwbGVNb250",
          "aENhcmREYWlseVJld2FyZFRpbWUYBCABKAUSNAoKY2hhbmdlSXRlbRgFIAMo",
          "CzIgLkJ1eU1vbnRoQ2FyZFJlcS5DaGFuZ2VJdGVtRW50cnkaMQoPQ2hhbmdl",
          "SXRlbUVudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoBToCOAEiEgoQ",
          "QnV5TW9udGhDYXJkUmVzcCLOAQoSTW9udGhDYXJkUmV3YXJkUmVxEiQKHGJ1",
          "bGVNb250aENhcmREYWlseVJld2FyZFRpbWUYASABKAUSJgoecHVycGxlTW9u",
          "dGhDYXJkRGFpbHlSZXdhcmRUaW1lGAIgASgFEjcKCmNoYW5nZUl0ZW0YAyAD",
          "KAsyIy5Nb250aENhcmRSZXdhcmRSZXEuQ2hhbmdlSXRlbUVudHJ5GjEKD0No",
          "YW5nZUl0ZW1FbnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiABKAU6AjgB",
          "IhUKE01vbnRoQ2FyZFJld2FyZFJlc3AivwIKElR1cm50YWJsZVJld2FyZFJl",
          "cRIXCg90dXJudGFibGVBZFRpbWUYASABKAUSGQoRdHVybnRhYmxlQWRDRFRp",
          "bWUYAiABKAkSFAoMdHVybnRhYmxlS2V5GAMgASgFEiMKDGhlcm9EYXRhTGlz",
          "dBgEIAEoCzINLkhlcm9EYXRhTGlzdBIWCg50b3RhbEhlcm9Db3VudBgFIAEo",
          "BRIZChFoYXZlRXF1aXBtZW50RGF0YRgGIAEoCRILCgNleHAYByABKAUSDgoG",
          "cHJvd2VyGAggASgFEjcKCmNoYW5nZUl0ZW0YCSADKAsyIy5UdXJudGFibGVS",
          "ZXdhcmRSZXEuQ2hhbmdlSXRlbUVudHJ5GjEKD0NoYW5nZUl0ZW1FbnRyeRIL",
          "CgNrZXkYASABKAUSDQoFdmFsdWUYAiABKAU6AjgBIhUKE1R1cm50YWJsZVJl",
          "d2FyZFJlc3AiHQoNQ2hhbmdlTmFtZVJlcRIMCgRuYW1lGAEgASgJIhAKDkNo",
          "YW5nZU5hbWVSZXNwIh0KDUNoYW5nZUljb25SZXESDAoEaWNvbhgBIAEoCSIQ",
          "Cg5DaGFuZ2VJY29uUmVzcEIWCgpjb20uY2IubXNnQghQQlBsYXllcmIGcHJv",
          "dG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::BeanReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::PingResp), global::PingResp.Parser, new[]{ "Time" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LoginReq), global::LoginReq.Parser, new[]{ "Account" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LoginResp), global::LoginResp.Parser, new[]{ "PlayerData", "STime" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SyncReq), global::SyncReq.Parser, new[]{ "PlayerData" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SyncResp), global::SyncResp.Parser, new[]{ "Success" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RankReq), global::RankReq.Parser, new[]{ "Type" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RankResp), global::RankResp.Parser, new[]{ "RankData" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SyncStageReq), global::SyncStageReq.Parser, new[]{ "Stage" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SyncStageResp), global::SyncStageResp.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AddDiamondReq), global::AddDiamondReq.Parser, new[]{ "ShopBuyDiamondFirst", "ChangeItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::AddDiamondResp), global::AddDiamondResp.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AddGoldReq), global::AddGoldReq.Parser, new[]{ "ShopBuyGoldFirst", "ChangeItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::AddGoldResp), global::AddGoldResp.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SyncItemReq), global::SyncItemReq.Parser, new[]{ "ChangeItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::SyncItemResp), global::SyncItemResp.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::NormalFinshReq), global::NormalFinshReq.Parser, new[]{ "HaveEquipmentData", "ChangeItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::NormalFinshResp), global::NormalFinshResp.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GoldABossFinshReq), global::GoldABossFinshReq.Parser, new[]{ "HaveEquipmentData", "GoldChallengedTime", "BossChallengedTime", "ChangeItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::GoldABossFinshResp), global::GoldABossFinshResp.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ClimbTowerFinshReq), global::ClimbTowerFinshReq.Parser, new[]{ "EndlessTower", "ChangeItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::ClimbTowerFinshResp), global::ClimbTowerFinshResp.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SurprisedRewardReq), global::SurprisedRewardReq.Parser, new[]{ "SurpriseBoxTime", "ChangeItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::SurprisedRewardResp), global::SurprisedRewardResp.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BuyMonthCardReq), global::BuyMonthCardReq.Parser, new[]{ "BuleMonthCardTime", "PurpleMonthCardTime", "BuleMonthCardDailyRewardTime", "PurpleMonthCardDailyRewardTime", "ChangeItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::BuyMonthCardResp), global::BuyMonthCardResp.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MonthCardRewardReq), global::MonthCardRewardReq.Parser, new[]{ "BuleMonthCardDailyRewardTime", "PurpleMonthCardDailyRewardTime", "ChangeItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::MonthCardRewardResp), global::MonthCardRewardResp.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TurntableRewardReq), global::TurntableRewardReq.Parser, new[]{ "TurntableAdTime", "TurntableAdCDTime", "TurntableKey", "HeroDataList", "TotalHeroCount", "HaveEquipmentData", "Exp", "Prower", "ChangeItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::TurntableRewardResp), global::TurntableRewardResp.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ChangeNameReq), global::ChangeNameReq.Parser, new[]{ "Name" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ChangeNameResp), global::ChangeNameResp.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ChangeIconReq), global::ChangeIconReq.Parser, new[]{ "Icon" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ChangeIconResp), global::ChangeIconResp.Parser, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
///心跳 --req nil
/// </summary>
public sealed partial class PingResp : pb::IMessage<PingResp> {
  private static readonly pb::MessageParser<PingResp> _parser = new pb::MessageParser<PingResp>(() => new PingResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PingResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PingResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PingResp(PingResp other) : this() {
    time_ = other.time_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PingResp Clone() {
    return new PingResp(this);
  }

  /// <summary>Field number for the "time" field.</summary>
  public const int TimeFieldNumber = 1;
  private int time_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Time {
    get { return time_; }
    set {
      time_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PingResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PingResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Time != other.Time) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Time != 0) hash ^= Time.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Time != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Time);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Time != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PingResp other) {
    if (other == null) {
      return;
    }
    if (other.Time != 0) {
      Time = other.Time;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Time = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///登录
/// </summary>
public sealed partial class LoginReq : pb::IMessage<LoginReq> {
  private static readonly pb::MessageParser<LoginReq> _parser = new pb::MessageParser<LoginReq>(() => new LoginReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LoginReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginReq(LoginReq other) : this() {
    account_ = other.account_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginReq Clone() {
    return new LoginReq(this);
  }

  /// <summary>Field number for the "account" field.</summary>
  public const int AccountFieldNumber = 1;
  private string account_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Account {
    get { return account_; }
    set {
      account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LoginReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LoginReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Account != other.Account) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Account.Length != 0) hash ^= Account.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Account.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Account);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Account.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LoginReq other) {
    if (other == null) {
      return;
    }
    if (other.Account.Length != 0) {
      Account = other.Account;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Account = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class LoginResp : pb::IMessage<LoginResp> {
  private static readonly pb::MessageParser<LoginResp> _parser = new pb::MessageParser<LoginResp>(() => new LoginResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LoginResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginResp(LoginResp other) : this() {
    PlayerData = other.playerData_ != null ? other.PlayerData.Clone() : null;
    sTime_ = other.sTime_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginResp Clone() {
    return new LoginResp(this);
  }

  /// <summary>Field number for the "playerData" field.</summary>
  public const int PlayerDataFieldNumber = 1;
  private global::PlayerPb playerData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlayerPb PlayerData {
    get { return playerData_; }
    set {
      playerData_ = value;
    }
  }

  /// <summary>Field number for the "sTime" field.</summary>
  public const int STimeFieldNumber = 7;
  private long sTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long STime {
    get { return sTime_; }
    set {
      sTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LoginResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LoginResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(PlayerData, other.PlayerData)) return false;
    if (STime != other.STime) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (playerData_ != null) hash ^= PlayerData.GetHashCode();
    if (STime != 0L) hash ^= STime.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (playerData_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(PlayerData);
    }
    if (STime != 0L) {
      output.WriteRawTag(56);
      output.WriteInt64(STime);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (playerData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerData);
    }
    if (STime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(STime);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LoginResp other) {
    if (other == null) {
      return;
    }
    if (other.playerData_ != null) {
      if (playerData_ == null) {
        playerData_ = new global::PlayerPb();
      }
      PlayerData.MergeFrom(other.PlayerData);
    }
    if (other.STime != 0L) {
      STime = other.STime;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (playerData_ == null) {
            playerData_ = new global::PlayerPb();
          }
          input.ReadMessage(playerData_);
          break;
        }
        case 56: {
          STime = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///同步基本信息
/// </summary>
public sealed partial class SyncReq : pb::IMessage<SyncReq> {
  private static readonly pb::MessageParser<SyncReq> _parser = new pb::MessageParser<SyncReq>(() => new SyncReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SyncReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncReq(SyncReq other) : this() {
    PlayerData = other.playerData_ != null ? other.PlayerData.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncReq Clone() {
    return new SyncReq(this);
  }

  /// <summary>Field number for the "playerData" field.</summary>
  public const int PlayerDataFieldNumber = 1;
  private global::PlayerPb playerData_;
  /// <summary>
  ///pid和account仅做验证，不能修改
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlayerPb PlayerData {
    get { return playerData_; }
    set {
      playerData_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SyncReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SyncReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(PlayerData, other.PlayerData)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (playerData_ != null) hash ^= PlayerData.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (playerData_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(PlayerData);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (playerData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerData);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SyncReq other) {
    if (other == null) {
      return;
    }
    if (other.playerData_ != null) {
      if (playerData_ == null) {
        playerData_ = new global::PlayerPb();
      }
      PlayerData.MergeFrom(other.PlayerData);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (playerData_ == null) {
            playerData_ = new global::PlayerPb();
          }
          input.ReadMessage(playerData_);
          break;
        }
      }
    }
  }

}

public sealed partial class SyncResp : pb::IMessage<SyncResp> {
  private static readonly pb::MessageParser<SyncResp> _parser = new pb::MessageParser<SyncResp>(() => new SyncResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SyncResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncResp(SyncResp other) : this() {
    success_ = other.success_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncResp Clone() {
    return new SyncResp(this);
  }

  /// <summary>Field number for the "success" field.</summary>
  public const int SuccessFieldNumber = 1;
  private bool success_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Success {
    get { return success_; }
    set {
      success_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SyncResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SyncResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Success != other.Success) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Success != false) hash ^= Success.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Success != false) {
      output.WriteRawTag(8);
      output.WriteBool(Success);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Success != false) {
      size += 1 + 1;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SyncResp other) {
    if (other == null) {
      return;
    }
    if (other.Success != false) {
      Success = other.Success;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Success = input.ReadBool();
          break;
        }
      }
    }
  }

}

/// <summary>
///排行榜
/// </summary>
public sealed partial class RankReq : pb::IMessage<RankReq> {
  private static readonly pb::MessageParser<RankReq> _parser = new pb::MessageParser<RankReq>(() => new RankReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RankReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RankReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RankReq(RankReq other) : this() {
    type_ = other.type_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RankReq Clone() {
    return new RankReq(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private int type_;
  /// <summary>
  ///世界排行1 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RankReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RankReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Type);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RankReq other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Type = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class RankResp : pb::IMessage<RankResp> {
  private static readonly pb::MessageParser<RankResp> _parser = new pb::MessageParser<RankResp>(() => new RankResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RankResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RankResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RankResp(RankResp other) : this() {
    rankData_ = other.rankData_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RankResp Clone() {
    return new RankResp(this);
  }

  /// <summary>Field number for the "rankData" field.</summary>
  public const int RankDataFieldNumber = 1;
  private static readonly pb::FieldCodec<global::RankPb> _repeated_rankData_codec
      = pb::FieldCodec.ForMessage(10, global::RankPb.Parser);
  private readonly pbc::RepeatedField<global::RankPb> rankData_ = new pbc::RepeatedField<global::RankPb>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::RankPb> RankData {
    get { return rankData_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RankResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RankResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!rankData_.Equals(other.rankData_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= rankData_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    rankData_.WriteTo(output, _repeated_rankData_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += rankData_.CalculateSize(_repeated_rankData_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RankResp other) {
    if (other == null) {
      return;
    }
    rankData_.Add(other.rankData_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          rankData_.AddEntriesFrom(input, _repeated_rankData_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///同步关卡
/// </summary>
public sealed partial class SyncStageReq : pb::IMessage<SyncStageReq> {
  private static readonly pb::MessageParser<SyncStageReq> _parser = new pb::MessageParser<SyncStageReq>(() => new SyncStageReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SyncStageReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncStageReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncStageReq(SyncStageReq other) : this() {
    stage_ = other.stage_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncStageReq Clone() {
    return new SyncStageReq(this);
  }

  /// <summary>Field number for the "stage" field.</summary>
  public const int StageFieldNumber = 1;
  private int stage_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Stage {
    get { return stage_; }
    set {
      stage_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SyncStageReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SyncStageReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Stage != other.Stage) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Stage != 0) hash ^= Stage.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Stage != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Stage);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Stage != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stage);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SyncStageReq other) {
    if (other == null) {
      return;
    }
    if (other.Stage != 0) {
      Stage = other.Stage;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Stage = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class SyncStageResp : pb::IMessage<SyncStageResp> {
  private static readonly pb::MessageParser<SyncStageResp> _parser = new pb::MessageParser<SyncStageResp>(() => new SyncStageResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SyncStageResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncStageResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncStageResp(SyncStageResp other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncStageResp Clone() {
    return new SyncStageResp(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SyncStageResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SyncStageResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SyncStageResp other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

/// <summary>
///添加钻石
/// </summary>
public sealed partial class AddDiamondReq : pb::IMessage<AddDiamondReq> {
  private static readonly pb::MessageParser<AddDiamondReq> _parser = new pb::MessageParser<AddDiamondReq>(() => new AddDiamondReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AddDiamondReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddDiamondReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddDiamondReq(AddDiamondReq other) : this() {
    shopBuyDiamondFirst_ = other.shopBuyDiamondFirst_;
    changeItem_ = other.changeItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddDiamondReq Clone() {
    return new AddDiamondReq(this);
  }

  /// <summary>Field number for the "shopBuyDiamondFirst" field.</summary>
  public const int ShopBuyDiamondFirstFieldNumber = 1;
  private string shopBuyDiamondFirst_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ShopBuyDiamondFirst {
    get { return shopBuyDiamondFirst_; }
    set {
      shopBuyDiamondFirst_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///改变的道具，客户端维护道具
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AddDiamondReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AddDiamondReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ShopBuyDiamondFirst != other.ShopBuyDiamondFirst) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ShopBuyDiamondFirst.Length != 0) hash ^= ShopBuyDiamondFirst.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ShopBuyDiamondFirst.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(ShopBuyDiamondFirst);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ShopBuyDiamondFirst.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ShopBuyDiamondFirst);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AddDiamondReq other) {
    if (other == null) {
      return;
    }
    if (other.ShopBuyDiamondFirst.Length != 0) {
      ShopBuyDiamondFirst = other.ShopBuyDiamondFirst;
    }
    changeItem_.Add(other.changeItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          ShopBuyDiamondFirst = input.ReadString();
          break;
        }
        case 18: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class AddDiamondResp : pb::IMessage<AddDiamondResp> {
  private static readonly pb::MessageParser<AddDiamondResp> _parser = new pb::MessageParser<AddDiamondResp>(() => new AddDiamondResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AddDiamondResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddDiamondResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddDiamondResp(AddDiamondResp other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddDiamondResp Clone() {
    return new AddDiamondResp(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AddDiamondResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AddDiamondResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AddDiamondResp other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

/// <summary>
///添加金币
/// </summary>
public sealed partial class AddGoldReq : pb::IMessage<AddGoldReq> {
  private static readonly pb::MessageParser<AddGoldReq> _parser = new pb::MessageParser<AddGoldReq>(() => new AddGoldReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AddGoldReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddGoldReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddGoldReq(AddGoldReq other) : this() {
    shopBuyGoldFirst_ = other.shopBuyGoldFirst_;
    changeItem_ = other.changeItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddGoldReq Clone() {
    return new AddGoldReq(this);
  }

  /// <summary>Field number for the "shopBuyGoldFirst" field.</summary>
  public const int ShopBuyGoldFirstFieldNumber = 1;
  private string shopBuyGoldFirst_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ShopBuyGoldFirst {
    get { return shopBuyGoldFirst_; }
    set {
      shopBuyGoldFirst_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///改变的道具，客户端维护道具
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AddGoldReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AddGoldReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ShopBuyGoldFirst != other.ShopBuyGoldFirst) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ShopBuyGoldFirst.Length != 0) hash ^= ShopBuyGoldFirst.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ShopBuyGoldFirst.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(ShopBuyGoldFirst);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ShopBuyGoldFirst.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ShopBuyGoldFirst);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AddGoldReq other) {
    if (other == null) {
      return;
    }
    if (other.ShopBuyGoldFirst.Length != 0) {
      ShopBuyGoldFirst = other.ShopBuyGoldFirst;
    }
    changeItem_.Add(other.changeItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          ShopBuyGoldFirst = input.ReadString();
          break;
        }
        case 18: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class AddGoldResp : pb::IMessage<AddGoldResp> {
  private static readonly pb::MessageParser<AddGoldResp> _parser = new pb::MessageParser<AddGoldResp>(() => new AddGoldResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AddGoldResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddGoldResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddGoldResp(AddGoldResp other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddGoldResp Clone() {
    return new AddGoldResp(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AddGoldResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AddGoldResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AddGoldResp other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

/// <summary>
///同步道具
/// </summary>
public sealed partial class SyncItemReq : pb::IMessage<SyncItemReq> {
  private static readonly pb::MessageParser<SyncItemReq> _parser = new pb::MessageParser<SyncItemReq>(() => new SyncItemReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SyncItemReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncItemReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncItemReq(SyncItemReq other) : this() {
    changeItem_ = other.changeItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncItemReq Clone() {
    return new SyncItemReq(this);
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 1;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 10);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///改变的道具，客户端维护道具
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SyncItemReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SyncItemReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= ChangeItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    changeItem_.WriteTo(output, _map_changeItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SyncItemReq other) {
    if (other == null) {
      return;
    }
    changeItem_.Add(other.changeItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class SyncItemResp : pb::IMessage<SyncItemResp> {
  private static readonly pb::MessageParser<SyncItemResp> _parser = new pb::MessageParser<SyncItemResp>(() => new SyncItemResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SyncItemResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncItemResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncItemResp(SyncItemResp other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncItemResp Clone() {
    return new SyncItemResp(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SyncItemResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SyncItemResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SyncItemResp other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

/// <summary>
///普通回合结算
/// </summary>
public sealed partial class NormalFinshReq : pb::IMessage<NormalFinshReq> {
  private static readonly pb::MessageParser<NormalFinshReq> _parser = new pb::MessageParser<NormalFinshReq>(() => new NormalFinshReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NormalFinshReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NormalFinshReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NormalFinshReq(NormalFinshReq other) : this() {
    haveEquipmentData_ = other.haveEquipmentData_;
    changeItem_ = other.changeItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NormalFinshReq Clone() {
    return new NormalFinshReq(this);
  }

  /// <summary>Field number for the "haveEquipmentData" field.</summary>
  public const int HaveEquipmentDataFieldNumber = 1;
  private string haveEquipmentData_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HaveEquipmentData {
    get { return haveEquipmentData_; }
    set {
      haveEquipmentData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///改变的道具，客户端维护道具
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NormalFinshReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NormalFinshReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (HaveEquipmentData != other.HaveEquipmentData) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HaveEquipmentData.Length != 0) hash ^= HaveEquipmentData.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HaveEquipmentData.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(HaveEquipmentData);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HaveEquipmentData.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HaveEquipmentData);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NormalFinshReq other) {
    if (other == null) {
      return;
    }
    if (other.HaveEquipmentData.Length != 0) {
      HaveEquipmentData = other.HaveEquipmentData;
    }
    changeItem_.Add(other.changeItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          HaveEquipmentData = input.ReadString();
          break;
        }
        case 18: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class NormalFinshResp : pb::IMessage<NormalFinshResp> {
  private static readonly pb::MessageParser<NormalFinshResp> _parser = new pb::MessageParser<NormalFinshResp>(() => new NormalFinshResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NormalFinshResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NormalFinshResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NormalFinshResp(NormalFinshResp other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NormalFinshResp Clone() {
    return new NormalFinshResp(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NormalFinshResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NormalFinshResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NormalFinshResp other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

/// <summary>
/// GoldABoss回合结算奖励
/// </summary>
public sealed partial class GoldABossFinshReq : pb::IMessage<GoldABossFinshReq> {
  private static readonly pb::MessageParser<GoldABossFinshReq> _parser = new pb::MessageParser<GoldABossFinshReq>(() => new GoldABossFinshReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GoldABossFinshReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GoldABossFinshReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GoldABossFinshReq(GoldABossFinshReq other) : this() {
    haveEquipmentData_ = other.haveEquipmentData_;
    goldChallengedTime_ = other.goldChallengedTime_;
    bossChallengedTime_ = other.bossChallengedTime_;
    changeItem_ = other.changeItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GoldABossFinshReq Clone() {
    return new GoldABossFinshReq(this);
  }

  /// <summary>Field number for the "haveEquipmentData" field.</summary>
  public const int HaveEquipmentDataFieldNumber = 1;
  private string haveEquipmentData_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HaveEquipmentData {
    get { return haveEquipmentData_; }
    set {
      haveEquipmentData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "goldChallengedTime" field.</summary>
  public const int GoldChallengedTimeFieldNumber = 2;
  private int goldChallengedTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GoldChallengedTime {
    get { return goldChallengedTime_; }
    set {
      goldChallengedTime_ = value;
    }
  }

  /// <summary>Field number for the "bossChallengedTime" field.</summary>
  public const int BossChallengedTimeFieldNumber = 3;
  private int bossChallengedTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BossChallengedTime {
    get { return bossChallengedTime_; }
    set {
      bossChallengedTime_ = value;
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 4;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 34);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///改变的道具，客户端维护道具
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GoldABossFinshReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GoldABossFinshReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (HaveEquipmentData != other.HaveEquipmentData) return false;
    if (GoldChallengedTime != other.GoldChallengedTime) return false;
    if (BossChallengedTime != other.BossChallengedTime) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HaveEquipmentData.Length != 0) hash ^= HaveEquipmentData.GetHashCode();
    if (GoldChallengedTime != 0) hash ^= GoldChallengedTime.GetHashCode();
    if (BossChallengedTime != 0) hash ^= BossChallengedTime.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HaveEquipmentData.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(HaveEquipmentData);
    }
    if (GoldChallengedTime != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(GoldChallengedTime);
    }
    if (BossChallengedTime != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(BossChallengedTime);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HaveEquipmentData.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HaveEquipmentData);
    }
    if (GoldChallengedTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoldChallengedTime);
    }
    if (BossChallengedTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BossChallengedTime);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GoldABossFinshReq other) {
    if (other == null) {
      return;
    }
    if (other.HaveEquipmentData.Length != 0) {
      HaveEquipmentData = other.HaveEquipmentData;
    }
    if (other.GoldChallengedTime != 0) {
      GoldChallengedTime = other.GoldChallengedTime;
    }
    if (other.BossChallengedTime != 0) {
      BossChallengedTime = other.BossChallengedTime;
    }
    changeItem_.Add(other.changeItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          HaveEquipmentData = input.ReadString();
          break;
        }
        case 16: {
          GoldChallengedTime = input.ReadInt32();
          break;
        }
        case 24: {
          BossChallengedTime = input.ReadInt32();
          break;
        }
        case 34: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class GoldABossFinshResp : pb::IMessage<GoldABossFinshResp> {
  private static readonly pb::MessageParser<GoldABossFinshResp> _parser = new pb::MessageParser<GoldABossFinshResp>(() => new GoldABossFinshResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GoldABossFinshResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[18]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GoldABossFinshResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GoldABossFinshResp(GoldABossFinshResp other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GoldABossFinshResp Clone() {
    return new GoldABossFinshResp(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GoldABossFinshResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GoldABossFinshResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GoldABossFinshResp other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

/// <summary>
/// 无尽之塔结算
/// </summary>
public sealed partial class ClimbTowerFinshReq : pb::IMessage<ClimbTowerFinshReq> {
  private static readonly pb::MessageParser<ClimbTowerFinshReq> _parser = new pb::MessageParser<ClimbTowerFinshReq>(() => new ClimbTowerFinshReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ClimbTowerFinshReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[19]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClimbTowerFinshReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClimbTowerFinshReq(ClimbTowerFinshReq other) : this() {
    endlessTower_ = other.endlessTower_;
    changeItem_ = other.changeItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClimbTowerFinshReq Clone() {
    return new ClimbTowerFinshReq(this);
  }

  /// <summary>Field number for the "endlessTower" field.</summary>
  public const int EndlessTowerFieldNumber = 1;
  private int endlessTower_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int EndlessTower {
    get { return endlessTower_; }
    set {
      endlessTower_ = value;
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///改变的道具，客户端维护
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ClimbTowerFinshReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ClimbTowerFinshReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (EndlessTower != other.EndlessTower) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (EndlessTower != 0) hash ^= EndlessTower.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (EndlessTower != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(EndlessTower);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (EndlessTower != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndlessTower);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ClimbTowerFinshReq other) {
    if (other == null) {
      return;
    }
    if (other.EndlessTower != 0) {
      EndlessTower = other.EndlessTower;
    }
    changeItem_.Add(other.changeItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          EndlessTower = input.ReadInt32();
          break;
        }
        case 18: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ClimbTowerFinshResp : pb::IMessage<ClimbTowerFinshResp> {
  private static readonly pb::MessageParser<ClimbTowerFinshResp> _parser = new pb::MessageParser<ClimbTowerFinshResp>(() => new ClimbTowerFinshResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ClimbTowerFinshResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[20]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClimbTowerFinshResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClimbTowerFinshResp(ClimbTowerFinshResp other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClimbTowerFinshResp Clone() {
    return new ClimbTowerFinshResp(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ClimbTowerFinshResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ClimbTowerFinshResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ClimbTowerFinshResp other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

/// <summary>
///获取SurprisedReward
/// </summary>
public sealed partial class SurprisedRewardReq : pb::IMessage<SurprisedRewardReq> {
  private static readonly pb::MessageParser<SurprisedRewardReq> _parser = new pb::MessageParser<SurprisedRewardReq>(() => new SurprisedRewardReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SurprisedRewardReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[21]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SurprisedRewardReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SurprisedRewardReq(SurprisedRewardReq other) : this() {
    surpriseBoxTime_ = other.surpriseBoxTime_;
    changeItem_ = other.changeItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SurprisedRewardReq Clone() {
    return new SurprisedRewardReq(this);
  }

  /// <summary>Field number for the "surpriseBoxTime" field.</summary>
  public const int SurpriseBoxTimeFieldNumber = 1;
  private int surpriseBoxTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SurpriseBoxTime {
    get { return surpriseBoxTime_; }
    set {
      surpriseBoxTime_ = value;
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///改变的道具，客户端维护
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SurprisedRewardReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SurprisedRewardReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SurpriseBoxTime != other.SurpriseBoxTime) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SurpriseBoxTime != 0) hash ^= SurpriseBoxTime.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SurpriseBoxTime != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(SurpriseBoxTime);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SurpriseBoxTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SurpriseBoxTime);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SurprisedRewardReq other) {
    if (other == null) {
      return;
    }
    if (other.SurpriseBoxTime != 0) {
      SurpriseBoxTime = other.SurpriseBoxTime;
    }
    changeItem_.Add(other.changeItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          SurpriseBoxTime = input.ReadInt32();
          break;
        }
        case 18: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class SurprisedRewardResp : pb::IMessage<SurprisedRewardResp> {
  private static readonly pb::MessageParser<SurprisedRewardResp> _parser = new pb::MessageParser<SurprisedRewardResp>(() => new SurprisedRewardResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SurprisedRewardResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[22]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SurprisedRewardResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SurprisedRewardResp(SurprisedRewardResp other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SurprisedRewardResp Clone() {
    return new SurprisedRewardResp(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SurprisedRewardResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SurprisedRewardResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SurprisedRewardResp other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

/// <summary>
///购买月卡
/// </summary>
public sealed partial class BuyMonthCardReq : pb::IMessage<BuyMonthCardReq> {
  private static readonly pb::MessageParser<BuyMonthCardReq> _parser = new pb::MessageParser<BuyMonthCardReq>(() => new BuyMonthCardReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BuyMonthCardReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[23]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuyMonthCardReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuyMonthCardReq(BuyMonthCardReq other) : this() {
    buleMonthCardTime_ = other.buleMonthCardTime_;
    purpleMonthCardTime_ = other.purpleMonthCardTime_;
    buleMonthCardDailyRewardTime_ = other.buleMonthCardDailyRewardTime_;
    purpleMonthCardDailyRewardTime_ = other.purpleMonthCardDailyRewardTime_;
    changeItem_ = other.changeItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuyMonthCardReq Clone() {
    return new BuyMonthCardReq(this);
  }

  /// <summary>Field number for the "buleMonthCardTime" field.</summary>
  public const int BuleMonthCardTimeFieldNumber = 1;
  private string buleMonthCardTime_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string BuleMonthCardTime {
    get { return buleMonthCardTime_; }
    set {
      buleMonthCardTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "purpleMonthCardTime" field.</summary>
  public const int PurpleMonthCardTimeFieldNumber = 2;
  private string purpleMonthCardTime_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PurpleMonthCardTime {
    get { return purpleMonthCardTime_; }
    set {
      purpleMonthCardTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "buleMonthCardDailyRewardTime" field.</summary>
  public const int BuleMonthCardDailyRewardTimeFieldNumber = 3;
  private int buleMonthCardDailyRewardTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BuleMonthCardDailyRewardTime {
    get { return buleMonthCardDailyRewardTime_; }
    set {
      buleMonthCardDailyRewardTime_ = value;
    }
  }

  /// <summary>Field number for the "purpleMonthCardDailyRewardTime" field.</summary>
  public const int PurpleMonthCardDailyRewardTimeFieldNumber = 4;
  private int purpleMonthCardDailyRewardTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PurpleMonthCardDailyRewardTime {
    get { return purpleMonthCardDailyRewardTime_; }
    set {
      purpleMonthCardDailyRewardTime_ = value;
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 5;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 42);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///改变的道具，客户端维护
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BuyMonthCardReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BuyMonthCardReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BuleMonthCardTime != other.BuleMonthCardTime) return false;
    if (PurpleMonthCardTime != other.PurpleMonthCardTime) return false;
    if (BuleMonthCardDailyRewardTime != other.BuleMonthCardDailyRewardTime) return false;
    if (PurpleMonthCardDailyRewardTime != other.PurpleMonthCardDailyRewardTime) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (BuleMonthCardTime.Length != 0) hash ^= BuleMonthCardTime.GetHashCode();
    if (PurpleMonthCardTime.Length != 0) hash ^= PurpleMonthCardTime.GetHashCode();
    if (BuleMonthCardDailyRewardTime != 0) hash ^= BuleMonthCardDailyRewardTime.GetHashCode();
    if (PurpleMonthCardDailyRewardTime != 0) hash ^= PurpleMonthCardDailyRewardTime.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (BuleMonthCardTime.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(BuleMonthCardTime);
    }
    if (PurpleMonthCardTime.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(PurpleMonthCardTime);
    }
    if (BuleMonthCardDailyRewardTime != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(BuleMonthCardDailyRewardTime);
    }
    if (PurpleMonthCardDailyRewardTime != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(PurpleMonthCardDailyRewardTime);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (BuleMonthCardTime.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(BuleMonthCardTime);
    }
    if (PurpleMonthCardTime.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PurpleMonthCardTime);
    }
    if (BuleMonthCardDailyRewardTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuleMonthCardDailyRewardTime);
    }
    if (PurpleMonthCardDailyRewardTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PurpleMonthCardDailyRewardTime);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BuyMonthCardReq other) {
    if (other == null) {
      return;
    }
    if (other.BuleMonthCardTime.Length != 0) {
      BuleMonthCardTime = other.BuleMonthCardTime;
    }
    if (other.PurpleMonthCardTime.Length != 0) {
      PurpleMonthCardTime = other.PurpleMonthCardTime;
    }
    if (other.BuleMonthCardDailyRewardTime != 0) {
      BuleMonthCardDailyRewardTime = other.BuleMonthCardDailyRewardTime;
    }
    if (other.PurpleMonthCardDailyRewardTime != 0) {
      PurpleMonthCardDailyRewardTime = other.PurpleMonthCardDailyRewardTime;
    }
    changeItem_.Add(other.changeItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          BuleMonthCardTime = input.ReadString();
          break;
        }
        case 18: {
          PurpleMonthCardTime = input.ReadString();
          break;
        }
        case 24: {
          BuleMonthCardDailyRewardTime = input.ReadInt32();
          break;
        }
        case 32: {
          PurpleMonthCardDailyRewardTime = input.ReadInt32();
          break;
        }
        case 42: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class BuyMonthCardResp : pb::IMessage<BuyMonthCardResp> {
  private static readonly pb::MessageParser<BuyMonthCardResp> _parser = new pb::MessageParser<BuyMonthCardResp>(() => new BuyMonthCardResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BuyMonthCardResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[24]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuyMonthCardResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuyMonthCardResp(BuyMonthCardResp other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuyMonthCardResp Clone() {
    return new BuyMonthCardResp(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BuyMonthCardResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BuyMonthCardResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BuyMonthCardResp other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

/// <summary>
///获取月卡奖励
/// </summary>
public sealed partial class MonthCardRewardReq : pb::IMessage<MonthCardRewardReq> {
  private static readonly pb::MessageParser<MonthCardRewardReq> _parser = new pb::MessageParser<MonthCardRewardReq>(() => new MonthCardRewardReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MonthCardRewardReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[25]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MonthCardRewardReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MonthCardRewardReq(MonthCardRewardReq other) : this() {
    buleMonthCardDailyRewardTime_ = other.buleMonthCardDailyRewardTime_;
    purpleMonthCardDailyRewardTime_ = other.purpleMonthCardDailyRewardTime_;
    changeItem_ = other.changeItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MonthCardRewardReq Clone() {
    return new MonthCardRewardReq(this);
  }

  /// <summary>Field number for the "buleMonthCardDailyRewardTime" field.</summary>
  public const int BuleMonthCardDailyRewardTimeFieldNumber = 1;
  private int buleMonthCardDailyRewardTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BuleMonthCardDailyRewardTime {
    get { return buleMonthCardDailyRewardTime_; }
    set {
      buleMonthCardDailyRewardTime_ = value;
    }
  }

  /// <summary>Field number for the "purpleMonthCardDailyRewardTime" field.</summary>
  public const int PurpleMonthCardDailyRewardTimeFieldNumber = 2;
  private int purpleMonthCardDailyRewardTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PurpleMonthCardDailyRewardTime {
    get { return purpleMonthCardDailyRewardTime_; }
    set {
      purpleMonthCardDailyRewardTime_ = value;
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 3;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 26);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///改变的道具，客户端维护
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MonthCardRewardReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MonthCardRewardReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BuleMonthCardDailyRewardTime != other.BuleMonthCardDailyRewardTime) return false;
    if (PurpleMonthCardDailyRewardTime != other.PurpleMonthCardDailyRewardTime) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (BuleMonthCardDailyRewardTime != 0) hash ^= BuleMonthCardDailyRewardTime.GetHashCode();
    if (PurpleMonthCardDailyRewardTime != 0) hash ^= PurpleMonthCardDailyRewardTime.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (BuleMonthCardDailyRewardTime != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(BuleMonthCardDailyRewardTime);
    }
    if (PurpleMonthCardDailyRewardTime != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(PurpleMonthCardDailyRewardTime);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (BuleMonthCardDailyRewardTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuleMonthCardDailyRewardTime);
    }
    if (PurpleMonthCardDailyRewardTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PurpleMonthCardDailyRewardTime);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MonthCardRewardReq other) {
    if (other == null) {
      return;
    }
    if (other.BuleMonthCardDailyRewardTime != 0) {
      BuleMonthCardDailyRewardTime = other.BuleMonthCardDailyRewardTime;
    }
    if (other.PurpleMonthCardDailyRewardTime != 0) {
      PurpleMonthCardDailyRewardTime = other.PurpleMonthCardDailyRewardTime;
    }
    changeItem_.Add(other.changeItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          BuleMonthCardDailyRewardTime = input.ReadInt32();
          break;
        }
        case 16: {
          PurpleMonthCardDailyRewardTime = input.ReadInt32();
          break;
        }
        case 26: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class MonthCardRewardResp : pb::IMessage<MonthCardRewardResp> {
  private static readonly pb::MessageParser<MonthCardRewardResp> _parser = new pb::MessageParser<MonthCardRewardResp>(() => new MonthCardRewardResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MonthCardRewardResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[26]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MonthCardRewardResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MonthCardRewardResp(MonthCardRewardResp other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MonthCardRewardResp Clone() {
    return new MonthCardRewardResp(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MonthCardRewardResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MonthCardRewardResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MonthCardRewardResp other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

/// <summary>
///转盘奖励
/// </summary>
public sealed partial class TurntableRewardReq : pb::IMessage<TurntableRewardReq> {
  private static readonly pb::MessageParser<TurntableRewardReq> _parser = new pb::MessageParser<TurntableRewardReq>(() => new TurntableRewardReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TurntableRewardReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[27]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TurntableRewardReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TurntableRewardReq(TurntableRewardReq other) : this() {
    turntableAdTime_ = other.turntableAdTime_;
    turntableAdCDTime_ = other.turntableAdCDTime_;
    turntableKey_ = other.turntableKey_;
    HeroDataList = other.heroDataList_ != null ? other.HeroDataList.Clone() : null;
    totalHeroCount_ = other.totalHeroCount_;
    haveEquipmentData_ = other.haveEquipmentData_;
    exp_ = other.exp_;
    prower_ = other.prower_;
    changeItem_ = other.changeItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TurntableRewardReq Clone() {
    return new TurntableRewardReq(this);
  }

  /// <summary>Field number for the "turntableAdTime" field.</summary>
  public const int TurntableAdTimeFieldNumber = 1;
  private int turntableAdTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TurntableAdTime {
    get { return turntableAdTime_; }
    set {
      turntableAdTime_ = value;
    }
  }

  /// <summary>Field number for the "turntableAdCDTime" field.</summary>
  public const int TurntableAdCDTimeFieldNumber = 2;
  private string turntableAdCDTime_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TurntableAdCDTime {
    get { return turntableAdCDTime_; }
    set {
      turntableAdCDTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "turntableKey" field.</summary>
  public const int TurntableKeyFieldNumber = 3;
  private int turntableKey_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TurntableKey {
    get { return turntableKey_; }
    set {
      turntableKey_ = value;
    }
  }

  /// <summary>Field number for the "heroDataList" field.</summary>
  public const int HeroDataListFieldNumber = 4;
  private global::HeroDataList heroDataList_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::HeroDataList HeroDataList {
    get { return heroDataList_; }
    set {
      heroDataList_ = value;
    }
  }

  /// <summary>Field number for the "totalHeroCount" field.</summary>
  public const int TotalHeroCountFieldNumber = 5;
  private int totalHeroCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TotalHeroCount {
    get { return totalHeroCount_; }
    set {
      totalHeroCount_ = value;
    }
  }

  /// <summary>Field number for the "haveEquipmentData" field.</summary>
  public const int HaveEquipmentDataFieldNumber = 6;
  private string haveEquipmentData_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HaveEquipmentData {
    get { return haveEquipmentData_; }
    set {
      haveEquipmentData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "exp" field.</summary>
  public const int ExpFieldNumber = 7;
  private int exp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Exp {
    get { return exp_; }
    set {
      exp_ = value;
    }
  }

  /// <summary>Field number for the "prower" field.</summary>
  public const int ProwerFieldNumber = 8;
  private int prower_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Prower {
    get { return prower_; }
    set {
      prower_ = value;
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 9;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 74);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///改变的道具，客户端维护
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TurntableRewardReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TurntableRewardReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TurntableAdTime != other.TurntableAdTime) return false;
    if (TurntableAdCDTime != other.TurntableAdCDTime) return false;
    if (TurntableKey != other.TurntableKey) return false;
    if (!object.Equals(HeroDataList, other.HeroDataList)) return false;
    if (TotalHeroCount != other.TotalHeroCount) return false;
    if (HaveEquipmentData != other.HaveEquipmentData) return false;
    if (Exp != other.Exp) return false;
    if (Prower != other.Prower) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TurntableAdTime != 0) hash ^= TurntableAdTime.GetHashCode();
    if (TurntableAdCDTime.Length != 0) hash ^= TurntableAdCDTime.GetHashCode();
    if (TurntableKey != 0) hash ^= TurntableKey.GetHashCode();
    if (heroDataList_ != null) hash ^= HeroDataList.GetHashCode();
    if (TotalHeroCount != 0) hash ^= TotalHeroCount.GetHashCode();
    if (HaveEquipmentData.Length != 0) hash ^= HaveEquipmentData.GetHashCode();
    if (Exp != 0) hash ^= Exp.GetHashCode();
    if (Prower != 0) hash ^= Prower.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TurntableAdTime != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(TurntableAdTime);
    }
    if (TurntableAdCDTime.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(TurntableAdCDTime);
    }
    if (TurntableKey != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(TurntableKey);
    }
    if (heroDataList_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(HeroDataList);
    }
    if (TotalHeroCount != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(TotalHeroCount);
    }
    if (HaveEquipmentData.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(HaveEquipmentData);
    }
    if (Exp != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(Exp);
    }
    if (Prower != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(Prower);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TurntableAdTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TurntableAdTime);
    }
    if (TurntableAdCDTime.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TurntableAdCDTime);
    }
    if (TurntableKey != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TurntableKey);
    }
    if (heroDataList_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(HeroDataList);
    }
    if (TotalHeroCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalHeroCount);
    }
    if (HaveEquipmentData.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HaveEquipmentData);
    }
    if (Exp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
    }
    if (Prower != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Prower);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TurntableRewardReq other) {
    if (other == null) {
      return;
    }
    if (other.TurntableAdTime != 0) {
      TurntableAdTime = other.TurntableAdTime;
    }
    if (other.TurntableAdCDTime.Length != 0) {
      TurntableAdCDTime = other.TurntableAdCDTime;
    }
    if (other.TurntableKey != 0) {
      TurntableKey = other.TurntableKey;
    }
    if (other.heroDataList_ != null) {
      if (heroDataList_ == null) {
        heroDataList_ = new global::HeroDataList();
      }
      HeroDataList.MergeFrom(other.HeroDataList);
    }
    if (other.TotalHeroCount != 0) {
      TotalHeroCount = other.TotalHeroCount;
    }
    if (other.HaveEquipmentData.Length != 0) {
      HaveEquipmentData = other.HaveEquipmentData;
    }
    if (other.Exp != 0) {
      Exp = other.Exp;
    }
    if (other.Prower != 0) {
      Prower = other.Prower;
    }
    changeItem_.Add(other.changeItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          TurntableAdTime = input.ReadInt32();
          break;
        }
        case 18: {
          TurntableAdCDTime = input.ReadString();
          break;
        }
        case 24: {
          TurntableKey = input.ReadInt32();
          break;
        }
        case 34: {
          if (heroDataList_ == null) {
            heroDataList_ = new global::HeroDataList();
          }
          input.ReadMessage(heroDataList_);
          break;
        }
        case 40: {
          TotalHeroCount = input.ReadInt32();
          break;
        }
        case 50: {
          HaveEquipmentData = input.ReadString();
          break;
        }
        case 56: {
          Exp = input.ReadInt32();
          break;
        }
        case 64: {
          Prower = input.ReadInt32();
          break;
        }
        case 74: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class TurntableRewardResp : pb::IMessage<TurntableRewardResp> {
  private static readonly pb::MessageParser<TurntableRewardResp> _parser = new pb::MessageParser<TurntableRewardResp>(() => new TurntableRewardResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TurntableRewardResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[28]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TurntableRewardResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TurntableRewardResp(TurntableRewardResp other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TurntableRewardResp Clone() {
    return new TurntableRewardResp(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TurntableRewardResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TurntableRewardResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TurntableRewardResp other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

/// <summary>
///修改名字
/// </summary>
public sealed partial class ChangeNameReq : pb::IMessage<ChangeNameReq> {
  private static readonly pb::MessageParser<ChangeNameReq> _parser = new pb::MessageParser<ChangeNameReq>(() => new ChangeNameReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ChangeNameReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[29]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChangeNameReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChangeNameReq(ChangeNameReq other) : this() {
    name_ = other.name_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChangeNameReq Clone() {
    return new ChangeNameReq(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ChangeNameReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ChangeNameReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ChangeNameReq other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class ChangeNameResp : pb::IMessage<ChangeNameResp> {
  private static readonly pb::MessageParser<ChangeNameResp> _parser = new pb::MessageParser<ChangeNameResp>(() => new ChangeNameResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ChangeNameResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[30]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChangeNameResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChangeNameResp(ChangeNameResp other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChangeNameResp Clone() {
    return new ChangeNameResp(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ChangeNameResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ChangeNameResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ChangeNameResp other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

/// <summary>
///修改icon
/// </summary>
public sealed partial class ChangeIconReq : pb::IMessage<ChangeIconReq> {
  private static readonly pb::MessageParser<ChangeIconReq> _parser = new pb::MessageParser<ChangeIconReq>(() => new ChangeIconReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ChangeIconReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[31]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChangeIconReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChangeIconReq(ChangeIconReq other) : this() {
    icon_ = other.icon_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChangeIconReq Clone() {
    return new ChangeIconReq(this);
  }

  /// <summary>Field number for the "icon" field.</summary>
  public const int IconFieldNumber = 1;
  private string icon_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Icon {
    get { return icon_; }
    set {
      icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ChangeIconReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ChangeIconReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Icon != other.Icon) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Icon.Length != 0) hash ^= Icon.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Icon.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Icon);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Icon.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ChangeIconReq other) {
    if (other == null) {
      return;
    }
    if (other.Icon.Length != 0) {
      Icon = other.Icon;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Icon = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class ChangeIconResp : pb::IMessage<ChangeIconResp> {
  private static readonly pb::MessageParser<ChangeIconResp> _parser = new pb::MessageParser<ChangeIconResp>(() => new ChangeIconResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ChangeIconResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[32]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChangeIconResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChangeIconResp(ChangeIconResp other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChangeIconResp Clone() {
    return new ChangeIconResp(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ChangeIconResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ChangeIconResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ChangeIconResp other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

#endregion


#endregion Designer generated code
