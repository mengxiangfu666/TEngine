// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: equipment.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from equipment.proto</summary>
public static partial class EquipmentReflection {

  #region Descriptor
  /// <summary>File descriptor for equipment.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static EquipmentReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg9lcXVpcG1lbnQucHJvdG8ilQEKD0J1eUVxdWlwbWVudFJlcRIZChFoYXZl",
          "RXF1aXBtZW50RGF0YRgBIAEoCRI0CgpjaGFuZ2VJdGVtGAIgAygLMiAuQnV5",
          "RXF1aXBtZW50UmVxLkNoYW5nZUl0ZW1FbnRyeRoxCg9DaGFuZ2VJdGVtRW50",
          "cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4ASISChBCdXlFcXVp",
          "cG1lbnRSZXNwIkQKE0J1eUZyZWVFcXVpcG1lbnRSZXESGQoRaGF2ZUVxdWlw",
          "bWVudERhdGEYASABKAkSEgoKc2hvcEVxVGltZRgCIAEoCSIWChRCdXlGcmVl",
          "RXF1aXBtZW50UmVzcCJYChBTeW5jRXF1aXBtZW50UmVxEhkKEWhhdmVFcXVp",
          "cG1lbnREYXRhGAEgASgJEhkKEXdlYXJFcXVpcG1lbnREYXRhGAIgASgJEg4K",
          "BnByb3dlchgDIAEoBSITChFTeW5jRXF1aXBtZW50UmVzcCIsCg9BZGRFcXVp",
          "cG1lbnRSZXESGQoRaGF2ZUVxdWlwbWVudERhdGEYASABKAkiLQoQQWRkRXF1",
          "aXBtZW50UmVzcBIZChFoYXZlRXF1aXBtZW50RGF0YRgBIAEoCUIZCgpjb20u",
          "Y2IubXNnQgtQQkVxdWlwbWVudGIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::BuyEquipmentReq), global::BuyEquipmentReq.Parser, new[]{ "HaveEquipmentData", "ChangeItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::BuyEquipmentResp), global::BuyEquipmentResp.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BuyFreeEquipmentReq), global::BuyFreeEquipmentReq.Parser, new[]{ "HaveEquipmentData", "ShopEqTime" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BuyFreeEquipmentResp), global::BuyFreeEquipmentResp.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SyncEquipmentReq), global::SyncEquipmentReq.Parser, new[]{ "HaveEquipmentData", "WearEquipmentData", "Prower" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SyncEquipmentResp), global::SyncEquipmentResp.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AddEquipmentReq), global::AddEquipmentReq.Parser, new[]{ "HaveEquipmentData" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AddEquipmentResp), global::AddEquipmentResp.Parser, new[]{ "HaveEquipmentData" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
///商店购买装备
/// </summary>
public sealed partial class BuyEquipmentReq : pb::IMessage<BuyEquipmentReq> {
  private static readonly pb::MessageParser<BuyEquipmentReq> _parser = new pb::MessageParser<BuyEquipmentReq>(() => new BuyEquipmentReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BuyEquipmentReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EquipmentReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuyEquipmentReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuyEquipmentReq(BuyEquipmentReq other) : this() {
    haveEquipmentData_ = other.haveEquipmentData_;
    changeItem_ = other.changeItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuyEquipmentReq Clone() {
    return new BuyEquipmentReq(this);
  }

  /// <summary>Field number for the "haveEquipmentData" field.</summary>
  public const int HaveEquipmentDataFieldNumber = 1;
  private string haveEquipmentData_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HaveEquipmentData {
    get { return haveEquipmentData_; }
    set {
      haveEquipmentData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///改变的道具，客户端维护道具
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BuyEquipmentReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BuyEquipmentReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (HaveEquipmentData != other.HaveEquipmentData) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HaveEquipmentData.Length != 0) hash ^= HaveEquipmentData.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HaveEquipmentData.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(HaveEquipmentData);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HaveEquipmentData.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HaveEquipmentData);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BuyEquipmentReq other) {
    if (other == null) {
      return;
    }
    if (other.HaveEquipmentData.Length != 0) {
      HaveEquipmentData = other.HaveEquipmentData;
    }
    changeItem_.Add(other.changeItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          HaveEquipmentData = input.ReadString();
          break;
        }
        case 18: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class BuyEquipmentResp : pb::IMessage<BuyEquipmentResp> {
  private static readonly pb::MessageParser<BuyEquipmentResp> _parser = new pb::MessageParser<BuyEquipmentResp>(() => new BuyEquipmentResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BuyEquipmentResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EquipmentReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuyEquipmentResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuyEquipmentResp(BuyEquipmentResp other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuyEquipmentResp Clone() {
    return new BuyEquipmentResp(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BuyEquipmentResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BuyEquipmentResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BuyEquipmentResp other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

/// <summary>
/// 商店免费购买装备
/// </summary>
public sealed partial class BuyFreeEquipmentReq : pb::IMessage<BuyFreeEquipmentReq> {
  private static readonly pb::MessageParser<BuyFreeEquipmentReq> _parser = new pb::MessageParser<BuyFreeEquipmentReq>(() => new BuyFreeEquipmentReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BuyFreeEquipmentReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EquipmentReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuyFreeEquipmentReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuyFreeEquipmentReq(BuyFreeEquipmentReq other) : this() {
    haveEquipmentData_ = other.haveEquipmentData_;
    shopEqTime_ = other.shopEqTime_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuyFreeEquipmentReq Clone() {
    return new BuyFreeEquipmentReq(this);
  }

  /// <summary>Field number for the "haveEquipmentData" field.</summary>
  public const int HaveEquipmentDataFieldNumber = 1;
  private string haveEquipmentData_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HaveEquipmentData {
    get { return haveEquipmentData_; }
    set {
      haveEquipmentData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "shopEqTime" field.</summary>
  public const int ShopEqTimeFieldNumber = 2;
  private string shopEqTime_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ShopEqTime {
    get { return shopEqTime_; }
    set {
      shopEqTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BuyFreeEquipmentReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BuyFreeEquipmentReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (HaveEquipmentData != other.HaveEquipmentData) return false;
    if (ShopEqTime != other.ShopEqTime) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HaveEquipmentData.Length != 0) hash ^= HaveEquipmentData.GetHashCode();
    if (ShopEqTime.Length != 0) hash ^= ShopEqTime.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HaveEquipmentData.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(HaveEquipmentData);
    }
    if (ShopEqTime.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ShopEqTime);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HaveEquipmentData.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HaveEquipmentData);
    }
    if (ShopEqTime.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ShopEqTime);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BuyFreeEquipmentReq other) {
    if (other == null) {
      return;
    }
    if (other.HaveEquipmentData.Length != 0) {
      HaveEquipmentData = other.HaveEquipmentData;
    }
    if (other.ShopEqTime.Length != 0) {
      ShopEqTime = other.ShopEqTime;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          HaveEquipmentData = input.ReadString();
          break;
        }
        case 18: {
          ShopEqTime = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class BuyFreeEquipmentResp : pb::IMessage<BuyFreeEquipmentResp> {
  private static readonly pb::MessageParser<BuyFreeEquipmentResp> _parser = new pb::MessageParser<BuyFreeEquipmentResp>(() => new BuyFreeEquipmentResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BuyFreeEquipmentResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EquipmentReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuyFreeEquipmentResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuyFreeEquipmentResp(BuyFreeEquipmentResp other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuyFreeEquipmentResp Clone() {
    return new BuyFreeEquipmentResp(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BuyFreeEquipmentResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BuyFreeEquipmentResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BuyFreeEquipmentResp other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

/// <summary>
/// 同步装备
/// </summary>
public sealed partial class SyncEquipmentReq : pb::IMessage<SyncEquipmentReq> {
  private static readonly pb::MessageParser<SyncEquipmentReq> _parser = new pb::MessageParser<SyncEquipmentReq>(() => new SyncEquipmentReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SyncEquipmentReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EquipmentReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncEquipmentReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncEquipmentReq(SyncEquipmentReq other) : this() {
    haveEquipmentData_ = other.haveEquipmentData_;
    wearEquipmentData_ = other.wearEquipmentData_;
    prower_ = other.prower_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncEquipmentReq Clone() {
    return new SyncEquipmentReq(this);
  }

  /// <summary>Field number for the "haveEquipmentData" field.</summary>
  public const int HaveEquipmentDataFieldNumber = 1;
  private string haveEquipmentData_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HaveEquipmentData {
    get { return haveEquipmentData_; }
    set {
      haveEquipmentData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "wearEquipmentData" field.</summary>
  public const int WearEquipmentDataFieldNumber = 2;
  private string wearEquipmentData_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string WearEquipmentData {
    get { return wearEquipmentData_; }
    set {
      wearEquipmentData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "prower" field.</summary>
  public const int ProwerFieldNumber = 3;
  private int prower_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Prower {
    get { return prower_; }
    set {
      prower_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SyncEquipmentReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SyncEquipmentReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (HaveEquipmentData != other.HaveEquipmentData) return false;
    if (WearEquipmentData != other.WearEquipmentData) return false;
    if (Prower != other.Prower) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HaveEquipmentData.Length != 0) hash ^= HaveEquipmentData.GetHashCode();
    if (WearEquipmentData.Length != 0) hash ^= WearEquipmentData.GetHashCode();
    if (Prower != 0) hash ^= Prower.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HaveEquipmentData.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(HaveEquipmentData);
    }
    if (WearEquipmentData.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(WearEquipmentData);
    }
    if (Prower != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Prower);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HaveEquipmentData.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HaveEquipmentData);
    }
    if (WearEquipmentData.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(WearEquipmentData);
    }
    if (Prower != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Prower);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SyncEquipmentReq other) {
    if (other == null) {
      return;
    }
    if (other.HaveEquipmentData.Length != 0) {
      HaveEquipmentData = other.HaveEquipmentData;
    }
    if (other.WearEquipmentData.Length != 0) {
      WearEquipmentData = other.WearEquipmentData;
    }
    if (other.Prower != 0) {
      Prower = other.Prower;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          HaveEquipmentData = input.ReadString();
          break;
        }
        case 18: {
          WearEquipmentData = input.ReadString();
          break;
        }
        case 24: {
          Prower = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class SyncEquipmentResp : pb::IMessage<SyncEquipmentResp> {
  private static readonly pb::MessageParser<SyncEquipmentResp> _parser = new pb::MessageParser<SyncEquipmentResp>(() => new SyncEquipmentResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SyncEquipmentResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EquipmentReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncEquipmentResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncEquipmentResp(SyncEquipmentResp other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncEquipmentResp Clone() {
    return new SyncEquipmentResp(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SyncEquipmentResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SyncEquipmentResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SyncEquipmentResp other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

/// <summary>
/// 添加装备
/// </summary>
public sealed partial class AddEquipmentReq : pb::IMessage<AddEquipmentReq> {
  private static readonly pb::MessageParser<AddEquipmentReq> _parser = new pb::MessageParser<AddEquipmentReq>(() => new AddEquipmentReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AddEquipmentReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EquipmentReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddEquipmentReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddEquipmentReq(AddEquipmentReq other) : this() {
    haveEquipmentData_ = other.haveEquipmentData_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddEquipmentReq Clone() {
    return new AddEquipmentReq(this);
  }

  /// <summary>Field number for the "haveEquipmentData" field.</summary>
  public const int HaveEquipmentDataFieldNumber = 1;
  private string haveEquipmentData_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HaveEquipmentData {
    get { return haveEquipmentData_; }
    set {
      haveEquipmentData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AddEquipmentReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AddEquipmentReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (HaveEquipmentData != other.HaveEquipmentData) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HaveEquipmentData.Length != 0) hash ^= HaveEquipmentData.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HaveEquipmentData.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(HaveEquipmentData);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HaveEquipmentData.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HaveEquipmentData);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AddEquipmentReq other) {
    if (other == null) {
      return;
    }
    if (other.HaveEquipmentData.Length != 0) {
      HaveEquipmentData = other.HaveEquipmentData;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          HaveEquipmentData = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class AddEquipmentResp : pb::IMessage<AddEquipmentResp> {
  private static readonly pb::MessageParser<AddEquipmentResp> _parser = new pb::MessageParser<AddEquipmentResp>(() => new AddEquipmentResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AddEquipmentResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EquipmentReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddEquipmentResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddEquipmentResp(AddEquipmentResp other) : this() {
    haveEquipmentData_ = other.haveEquipmentData_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddEquipmentResp Clone() {
    return new AddEquipmentResp(this);
  }

  /// <summary>Field number for the "haveEquipmentData" field.</summary>
  public const int HaveEquipmentDataFieldNumber = 1;
  private string haveEquipmentData_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HaveEquipmentData {
    get { return haveEquipmentData_; }
    set {
      haveEquipmentData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AddEquipmentResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AddEquipmentResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (HaveEquipmentData != other.HaveEquipmentData) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HaveEquipmentData.Length != 0) hash ^= HaveEquipmentData.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HaveEquipmentData.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(HaveEquipmentData);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HaveEquipmentData.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HaveEquipmentData);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AddEquipmentResp other) {
    if (other == null) {
      return;
    }
    if (other.HaveEquipmentData.Length != 0) {
      HaveEquipmentData = other.HaveEquipmentData;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          HaveEquipmentData = input.ReadString();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
